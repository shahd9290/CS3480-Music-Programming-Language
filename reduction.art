(* Reduction.art - project starter *)

!configuration -> _sig:__map, _alpha:__list

(* Term rewrite rules *)
-assignI _n |> __int32(_)                                            --- assign(_X,_n),_sig,_alpha -> __done, __put(_sig, _X, _n), _alpha
-assignD _n |> __real64(_)                                           --- assign(_X,_n),_sig,_alpha -> __done, __put(_sig, _X, _n), _alpha
-assignB _n |> __bool(_)                                             --- assign(_X,_n),_sig,_alpha -> __done, __put(_sig, _X, _n), _alpha
-assignR _E,_sig,_alpha -> _I,_sigP,_alphaP                          --- assign(_X,_E),_sig,_alpha -> assign(_X,_I),_sigP,_alphaP

-deref                                                               --- deref(_R),_sig,_alpha -> __get(_sig,_R),_sig, _alpha

-sequenceDone                                                        --- seq(__done, _C),_sig,_alpha -> _C,_sig, _alpha
-sequenceI _n |> __int32(_) _R,_sig,_alpha -> _RP, _sigP,_alphaP     --- seq(_n, _R), _sig,_alpha -> seq(_RP, _n), _sigP,_alphaP
-sequence _C1,_sig,_alpha -> _C1P,_sigP,_alphaP                      --- seq(_C1,_C2),_sig,_alpha -> seq(_C1P,_C2),_sigP,_alphaP

-ifTrue                                                              --- if(true,_C1,_C2),_sig,_alpha -> _C1,_sig, _alpha
-ifFalse                                                             --- if(false,_C1,_C2),_sig,_alpha -> _C2,_sig, _alpha
-ifResolve _E,_sig,_alpha ->_EP,_sigP,_alphaP                        --- if(_E,_C1,_C2),_sig,_alpha -> if(_EP,_C1,_C2),_sigP,_alphaP
-ifElif                                                              --- if(_E1, _C1, _E2, _C2, _C3),_sig,_alpha -> if(_E1, _C1, if(_E2, _C2, _C3)),_sig, _alpha

-while                                                               --- while(_E,_C),_sig,_alpha -> if(_E,seq(_C,while(_E,_C)),__done),_sig, _alpha
-for                                                                 --- for(_I, _C, _U, _B), _sig,_alpha -> seq(_I, while(_C, seq(_B, _U))), _sig, _alpha
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

-and  _L |> __bool(_) _R |> __bool(_)                                --- and(_L, _R),_sig,_alpha -> __and(_L, _R),_sig, _alpha
-andR _L |> __bool(_) _R,_sig,_alpha -> _RP, _sigP,_alphaP           --- and(_L, _R),_sig,_alpha -> and(_L, _RP),_sigP,_alphaP
-andL _L,_sig,_alpha -> _LP, _sigP,_alphaP                           --- and(_L, _R),_sig,_alpha -> and(_LP, _R),_sigP,_alphaP

-or  _L |> __bool(_) _R |> __bool(_)                                 --- or(_L, _R),_sig,_alpha -> __or(_L, _R),_sig, _alpha
-orR _L |> __bool(_) _R,_sig,_alpha -> _RP, _sigP,_alphaP            --- or(_L, _R),_sig,_alpha -> or(_L, _RP),_sigP,_alphaP
-orL _L,_sig,_alpha -> _LP, _sigP,_alphaP                            --- or(_L, _R),_sig,_alpha -> or(_LP, _R),_sigP,_alphaP

-not _B |> __bool(_)                                                 --- not(_B), _sig,_alpha -> __not(_B), _sig, _alpha
-notR _B, _sig,_alpha -> _BP, _sigP,_alphaP                          --- not(_B), _sig,_alpha -> not(_BP), _sigP,_alphaP

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-neI  _n1 |> __int32(_) _n2  |> __int32(_)                           --- ne(_n1,_n2),_sig,_alpha  -> __ne(_n1,_n2),_sig,_alpha 
-neD  _n1 |> __real64(_) _n2 |> __real64(_)                          --- ne(_n1,_n2),_sig,_alpha  -> __ne(_n1,_n2),_sig,_alpha 
-neRi _n  |> __int32(_)  _E2,_sig,_alpha -> _I2,_sigP,_alphaP        --- ne(_n,_E2) ,_sig,_alpha  -> ne(_n,_I2),_sigP,_alphaP
-neRd _n  |> __real64(_)  _E2,_sig,_alpha -> _I2,_sigP,_alphaP       --- ne(_n,_E2) ,_sig,_alpha  -> ne(_n,_I2),_sigP,_alphaP
-neL _E1,_sig,_alpha -> _I1,_sigP,_alphaP                            --- ne(_E1,_E2),_sig,_alpha  -> ne(_I1,_E2),_sigP,_alphaP

-eqI _L  |> __int32(_) _R |> __int32(_)                              --- eq(_L, _R),_sig,_alpha -> __eq(_L, _R),_sig,_alpha // ==
-eqD _L  |> __real64(_) _R |> __real64(_)                            --- eq(_L, _R),_sig,_alpha -> __eq(_L, _R),_sig,_alpha // ==
-eqRi _L |> __int32(_) _R,_sig,_alpha -> _RP,_sigP,_alphaP           --- eq(_L, _R),_sig,_alpha -> eq(_L, _RP),_sigP,_alphaP
-eqRd _L |> __real64(_) _R,_sig,_alpha -> _RP,_sigP,_alphaP          --- eq(_L, _R),_sig,_alpha -> eq(_L, _RP),_sigP,_alphaP
-eqL _L,_sig,_alpha -> _LP,_sigP,_alphaP                             --- eq(_L, _R),_sig,_alpha -> eq(_LP, _R),_sigP,_alphaP 

-gtI  _n1 |> __int32(_)  _n2 |> __int32(_)                           --- gt(_n1,_n2),_sig,_alpha  ->  __gt(_n1,_n2),_sig,_alpha 
-gtD  _n1 |> __real64(_)  _n2 |> __real64(_)                         --- gt(_n1,_n2),_sig,_alpha  ->  __gt(_n1,_n2),_sig,_alpha 
-gtRi _n  |> __int32(_)  _E2,_sig,_alpha -> _I2,_sigP,_alphaP        --- gt(_n,_E2),_sig,_alpha   -> gt(_n,_I2),_sigP,_alphaP
-gtRd _n  |> __real64(_)  _E2,_sig,_alpha -> _I2,_sigP,_alphaP       --- gt(_n,_E2),_sig,_alpha   -> gt(_n,_I2),_sigP,_alphaP
-gtL _E1,_sig,_alpha -> _I1,_sigP,_alphaP                            --- gt(_E1,_E2),_sig,_alpha  -> gt(_I1,_E2),_sigP,_alphaP

-ltI _L  |> __int32(_) _R |> __int32(_)                              --- lt(_L, _R),_sig,_alpha  -> __lt(_L, _R),_sig,_alpha  // <
-ltD _L  |> __real64(_) _R |> __real64(_)                            --- lt(_L, _R),_sig,_alpha  -> __lt(_L, _R),_sig,_alpha  // <
-ltRi _L |> __int32(_) _R,_sig,_alpha  -> _RP,_sigP,_alphaP          --- lt(_L, _R),_sig,_alpha  -> lt(_L, _RP),_sigP,_alphaP 
-ltRd _L |> __real64(_) _R,_sig,_alpha  -> _RP,_sigP,_alphaP         --- lt(_L, _R),_sig,_alpha  -> lt(_L, _RP),_sigP,_alphaP 
-ltL _L,_sig,_alpha  -> _LP,_sigP,_alphaP                            --- lt(_L, _R),_sig,_alpha  -> lt(_LP, _R),_sigP,_alphaP  

-geI _L  |> __int32(_) _R |> __int32(_)                              --- ge(_L, _R),_sig,_alpha  -> __ge(_L, _R),_sig,_alpha  // >=
-geD _L  |> __real64(_) _R |> __real64(_)                            --- ge(_L, _R),_sig,_alpha  -> __ge(_L, _R),_sig,_alpha  // >=
-geRi _L |> __int32(_) _R,_sig,_alpha  -> _RP,_sigP,_alphaP          --- ge(_L, _R),_sig,_alpha  -> ge(_L, _RP),_sigP,_alphaP 
-geRd _L |> __real64(_) _R,_sig,_alpha  -> _RP,_sigP,_alphaP         --- ge(_L, _R),_sig,_alpha  -> ge(_L, _RP),_sigP,_alphaP 
-geL _L,_sig,_alpha  -> _LP,_sigP,_alphaP                            --- ge(_L, _R),_sig,_alpha  -> ge(_LP, _R),_sigP,_alphaP  

-leI _L  |> __int32(_) _R |> __int32(_)                              --- le(_L, _R),_sig,_alpha  -> __le(_L, _R),_sig,_alpha  // <=
-leD _L  |> __real64(_) _R |> __real64(_)                            --- le(_L, _R),_sig,_alpha  -> __le(_L, _R),_sig,_alpha  // <=
-leRi _L |> __int32(_) _R,_sig,_alpha  -> _RP,_sigP,_alphaP          --- le(_L, _R),_sig,_alpha  -> le(_L, _RP),_sigP,_alphaP 
-leRd _L |> __real64(_) _R,_sig,_alpha  -> _RP,_sigP,_alphaP         --- le(_L, _R),_sig,_alpha  -> le(_L, _RP),_sigP,_alphaP 
-leL _L,_sig,_alpha  -> _LP,_sigP,_alphaP                            --- le(_L, _R),_sig,_alpha  -> le(_LP, _R),_sigP,_alphaP 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

-subI  _n1 |> __int32(_) _n2  |> __int32(_)                          --- sub(_n1,_n2),_sig,_alpha -> __sub(_n1,_n2),_sig,_alpha 
-subD  _n1 |> __real64(_) _n2 |> __real64(_)                         --- sub(_n1,_n2),_sig,_alpha -> __sub(_n1,_n2),_sig,_alpha 
-subRi _n  |> __int32(_) _E2,_sig,_alpha -> _I2,_sigP,_alphaP        --- sub(_n,_E2),_sig,_alpha  -> sub(_n,_I2),_sigP,_alphaP
-subRd _n  |> __real64(_) _E2,_sig,_alpha -> _I2,_sigP,_alphaP       --- sub(_n,_E2),_sig,_alpha  -> sub(_n,_I2),_sigP,_alphaP
-subL _E1,_sig,_alpha -> _I1,_sigP,_alphaP                           --- sub(_E1,_E2),_sig,_alpha -> sub(_I1,_E2),_sigP,_alphaP

-addI _L  |> __int32(_) _R  |> __int32(_)                            --- add(_L, _R),_sig,_alpha -> __add(_L, _R),_sig,_alpha 
-addD _L  |> __real64(_) _R |> __real64(_)                           --- add(_L, _R),_sig,_alpha -> __add(_L, _R),_sig,_alpha 
-addRi _L |> __int32(_) _R,_sig,_alpha -> _RP,_sigP,_alphaP          --- add(_L, _R),_sig,_alpha -> add(_L, _RP),_sigP,_alphaP
-addRi _L |> __real64(_) _R,_sig,_alpha -> _RP,_sigP,_alphaP         --- add(_L, _R),_sig,_alpha -> add(_L, _RP),_sigP,_alphaP
-addL _L,_sig,_alpha -> _LP,_sigP,_alphaP                            --- add(_L, _R),_sig,_alpha -> add(_LP, _R),_sigP,_alphaP

-mulI _L  |> __int32(_) _R  |> __int32(_)                            --- mul(_L, _R),_sig,_alpha -> __mul(_L, _R),_sig,_alpha 
-mulD _L  |> __real64(_) _R |> __real64(_)                           --- mul(_L, _R),_sig,_alpha -> __mul(_L, _R),_sig,_alpha 
-mulRi _L |> __int32(_) _R,_sig,_alpha -> _RP,_sigP,_alphaP          --- mul(_L, _R),_sig,_alpha -> mul(_L, _RP),_sigP,_alphaP
-mulRi _L |> __real64(_) _R,_sig,_alpha -> _RP,_sigP,_alphaP         --- mul(_L, _R),_sig,_alpha -> mul(_L, _RP),_sigP,_alphaP
-mulL _L,_sig,_alpha -> _LP,_sigP,_alphaP                            --- mul(_L, _R),_sig,_alpha -> mul(_LP, _R),_sigP,_alphaP


-divI _L  |> __int32(_) _R  |> __int32(_)                            --- div(_L, _R),_sig,_alpha -> __div(_L, _R),_sig,_alpha 
-divD _L  |> __real64(_) _R |> __real64(_)                           --- div(_L, _R),_sig,_alpha -> __div(_L, _R),_sig,_alpha 
-divRi _L |> __int32(_) _R,_sig,_alpha -> _RP,_sigP,_alphaP          --- div(_L, _R),_sig,_alpha -> div(_L, _RP),_sigP,_alphaP
-divRi _L |> __real64(_) _R,_sig,_alpha -> _RP,_sigP,_alphaP         --- div(_L, _R),_sig,_alpha -> div(_L, _RP),_sigP,_alphaP
-divL _L,_sig,_alpha -> _LP,_sigP,_alphaP                            --- div(_L, _R),_sig,_alpha -> div(_LP, _R),_sigP,_alphaP

-modI _L  |> __int32(_) _R  |> __int32(_)                            --- mod(_L, _R),_sig,_alpha -> __mod(_L, _R),_sig,_alpha 
-modD _L  |> __real64(_) _R |> __real64(_)                           --- mod(_L, _R),_sig,_alpha -> __mod(_L, _R),_sig,_alpha 
-modRi _L |> __int32(_) _R,_sig,_alpha -> _RP,_sigP,_alphaP          --- mod(_L, _R),_sig,_alpha -> mod(_L, _RP),_sigP,_alphaP
-modRi _L |> __real64(_) _R,_sig,_alpha -> _RP,_sigP,_alphaP         --- div(_L, _R),_sig,_alpha -> mod(_L, _RP),_sigP,_alphaP
-modL _L,_sig,_alpha -> _LP,_sigP,_alphaP                            --- mod(_L, _R),_sig,_alpha -> mod(_LP, _R),_sigP,_alphaP

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

-preinc                                                              --- preinc(_n), _sig,_alpha -> assign(_n, add(deref(_n), 1)), _sig,_alpha 
-predec                                                              --- predec(_n), _sig,_alpha -> assign(_n, sub(deref(_n), 1)), _sig,_alpha 
-postinc                                                             --- postinc(_n), _sig,_alpha -> seq(deref(_n), preinc(_n)),_sig,_alpha 
-postdec                                                             --- postdec(_n), _sig,_alpha -> seq(deref(_n), predec(_n)),_sig,_alpha 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

-plugin                                                              --- plugin(_O),_sig,_alpha -> __plugin(_O),_sig,_alpha 
-plugin                                                              --- plugin(_O, _X),_sig,_alpha -> __plugin(_O, _X),_sig,_alpha 
-plugin                                                              --- plugin(_O, _X, _Y),_sig,_alpha -> __plugin(_O, _X, _Y),_sig,_alpha 
-plugin                                                              --- plugin(_O, _X, _Y, _Z),_sig,_alpha -> __plugin(_O, _X, _Y, _Z),_sig,_alpha 

-play                                                                --- play(_A, _B, _C),_sig,_alpha -> __plugin("play", _A, _B, _C),_sig,_alpha 

(*  CFG rules *)
seq ::= statement^^ | statement seq 
statement ::= assign^^ | while^^ | for^^ | if^^ | plugin^^ ';'^ | play^^ ';'^ | expression^^ ';'^ | pre^^ ';'^ | post^^ ';'^
assign ::= &ID ':='^ expression ';'^
while ::= 'while'^ expression 'do'^ statement
for ::= 'for'^ '('^ assign expression ';'^ pre ')'^ 'do'^ statement
if ::= 'if'^ expression 'then'^ statement | 'if'^ expression 'then'^ statement 'else'^ statement | 'if'^ expression 'then'^ statement 'otherwise if'^ expression 'then'^ statement 'else'^ statement

plugin ::= 'plugin'^ '('^ expressions^ ')'^  
play ::= 'play'^ __string ','^ __string ','^ __string
expressions ::= expression | expression ','^ expressions^
expression ::= rels^^ | logic^^
rels ::= adds^^ | lt^^ | gt^^ | ne^^ | eq^^ | le^^ | ge^^
  gt ::= adds '>'^ adds
  lt ::= adds '<'^ adds
  ge ::= adds '>='^ adds
  le ::= adds '<='^ adds
  ne ::= adds '!='^ adds
  eq ::= adds '=='^ adds

adds  ::= operand^^ | sub^^ | add^^ | mul^^ | div^^ | mod^^
  add ::= adds '+'^ operand
  sub ::= adds '-'^ operand
  mul ::= adds '*'^ operand
  div ::= adds '/'^ operand
  mod ::= adds '%'^ operand

logic ::= boolean^^ | and^^ | or^^ | not^^
  and ::= boolean '&&'^ boolean
  or ::= boolean '||'^ boolean
  not ::= '!'^ boolean
operand ::= __real64^^ | __int32^^ | deref^^ | __string^^ | plugin^^
boolean ::= __bool^^
deref   ::= &ID
pre ::= preinc^^ | predec^^ 
  preinc ::= '++'^ &ID
  predec ::= '--'^ &ID
post ::= postinc^^ | postdec^^ 
  postinc ::= &ID '++'^
  postdec ::= &ID '--'^
__int32 ::= &INTEGER
__real64 ::= &REAL
__bool ::= 'true' | 'false'
__string::= &STRING_SQ

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// !try assign(a, 10), __map, __list= __done, {a=10}, []
// !try assign(b, 5.0), __map, __list= __done, {b=5.0}, []
// !try assign(c, true),__map, __list= __done, {c=true}, []
// !try sub(10, 5),__map, __list= 5, {=}, []
// !try sub(15.0, sub(10.0, 5.0)),__map, __list= 10.0, {=}, []


// !try add(10, 5),__map, __list= 15, {=}, []
// !try add(15.0, add(10.0, 5.0)),__map, __list= 30.0, {=}, []

// !try mul(10, 5),__map, __list= 50, {=}, []
// !try mul(15.0, mul(10.0, 5.0)),__map, __list= 750.0, {=}, []

// !try div(10, 5),__map, __list= 2, {=}, []
// !try div(15, 2),__map, __list= 7, {=}, [] // float answer
// !try div(15.0, div(10.0, 5.0)),__map, __list= 7.5, {=}, []

// !try mod(100.0, 3.0), __map, __list= 1.0, {=}, []
// !try "10 % 4;" = 2, {=}, []

// !try "10 + 5;" = 15, {=}, []
// !try "10 - 5;" = 5, {=}, []
// !try "10 * 5;" = 50, {=}, []
// !try "10 / 5;" = 2, {=}, []

// !try eq(5, 5), __map, __list= true, {=}, []
// !try lt(3, 5), __map, __list= true, {=}, []
// !try le(3, 5), __map, __list= true, {=}, []
// !try le(5, 5), __map, __list= true, {=}, []
// !try ge(5, 5), __map, __list= true, {=}, []
// !try ge(10, 5), __map, __list= true, {=}, []

// !try eq(5, 4), __map, __list= false, {=}, []
// !try lt(5, 3), __map, __list= false, {=}, []
// !try le(5, 3), __map, __list= false, {=}, []
// !try ge(5, 10), __map, __list= false, {=}, []

// !try and(true, true),__map, __list= true, {=}, []
// !try and(true, false),__map, __list= false, {=}, []
// !try and(false, true),__map, __list= false, {=}, []
// !try and(false, false),__map, __list= false, {=}, []
// !try and(gt(9, 5), lt(9, 10)),__map, __list= true, {=}, []

// !try or(true, true),__map, __list= true, {=}, []
// !try or(true, false),__map, __list= true, {=}, []
// !try or(false, true),__map, __list= true, {=}, []
// !try or(false, false),__map, __list= false, {=}, []
// !try or(gt(9, 5), lt(9, 10)),__map, __list= true, {=}, []

// !try not(true),__map, __list= false, {=}, []
// !try not(false),__map, __list= true, {=}, []

!try "true && true;" = true, {=}, []
!try "true || false;" = true, {=}, []
!try "!false;" = true, {=}, []

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// !try "x := 5; x := x + 1;" = __done, {x=6}, []
// !try seq(assign(x, 5), preinc(x)), __map, __list= __done, {x=6}, []
// !try seq(assign(x, 5), predec(x)), __map, __list= __done, {x=4}, []
// !try "x := 5; ++x;" = __done, {x=6}, []
// !try "x := 5; --x;" = __done, {x=4}, []
// !try seq(assign(x, 5), postinc(x)),__map, __list= 5, {x=6}, []
// !try seq(assign(x, 5), postdec(x)),__map, __list= 5, {x=4}, []
// !try "x := 5; x++;" = 5, {x=6}, []
// !try "x := 5; x--;" = 5, {x=4}, []

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//!try for(assign(x, 0), lt(deref(x), 5), preinc(x), seq(plugin("init"),plugin("ding"))), __map, __list
// !try "plugin('init');"
// !try "for(x := 0; x < 5; ++x) do plugin('ding');"

// !try seq(assign(x, 5), if(lt(deref(x), 5), assign(x, 10), gt(deref(x), 5), assign(x, 0), assign(x, -1))), __map,__list
// !try "x:= 10; if x < 5 then x:= 10; otherwise if x > 5 then x := 5; else x := 0;" = __done, {x=5}, []
// !try "x:= 4; if x < 5 then x:= 10; otherwise if x > 5 then x := 5; else x := 0;" = __done, {x=10}, []
// !try "x:= 5; if x < 5 then x:= 10; otherwise if x > 5 then x := 5; else x := 0;" = __done, {x=0}, []

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

(* GCD examples *)
//!try seq(assign(a,6), seq(assign(b,9), while(ne(deref(a), deref(b)), if(gt(deref(a), deref(b)), assign(a, sub(deref(a), deref(b))), assign(b, sub(deref(b), deref(a))))))), __map
//!try "a := 6; b := 9; while a != b do if a > b then a := a - b; else b := b - a;"


(* Plugin test *)
//!try "plugin('init');"
//!try "plugin('init'); plugin('play', 'B', 'A', 'D');"
//!try "plugin('init'); play 'B', 'A', 'D';" 
//!try "plugin('weird', 666); "
 