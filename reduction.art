(* Reduction.art - project starter *)

!configuration -> _sig:__map

(* Term rewrite rules *)
-assign  _n |> __int32(_)    --- assign(_X,_n),_sig -> __done,__put(_sig,_X,_n)
-assignR _E,_sig -> _I,_sigP --- assign(_X,_E),_sig -> assign(_X,_I),_sigP

-deref --- deref(_R),_sig -> __get(_sig,_R),_sig

-sequenceDone                    --- seq(__done, _C),_sig -> _C,_sig
-sequence _C1,_sig -> _C1P,_sigP --- seq(_C1,_C2),_sig -> seq(_C1P,_C2),_sigP

-ifTrue                        --- if(true,_C1,_C2),_sig -> _C1,_sig
-ifFalse                       --- if(false,_C1,_C2),_sig -> _C2,_sig
-ifResolve _E,_sig ->_EP,_sigP --- if(_E,_C1,_C2),_sig -> if(_EP,_C1,_C2),_sigP

-while --- while(_E,_C),_sig -> if(_E,seq(_C,while(_E,_C)),__done),_sig

-gt  _n1 |> __int32(_)  _n2 |> __int32(_)     --- gt(_n1,_n2),_sig  ->  __gt(_n1,_n2),_sig 
-gtR _n |> __int32(_)  _E2,_sig -> _I2,_sigP  --- gt(_n,_E2),_sig   -> gt(_n,_I2),_sigP
-gtL _E1,_sig -> _I1,_sigP                    --- gt(_E1,_E2),_sig  -> gt(_I1,_E2),_sigP

-ne  _n1 |> __int32(_) _n2 |> __int32(_)      --- ne(_n1,_n2),_sig  -> __ne(_n1,_n2),_sig
-neR _n |> __int32(_)  _E2,_sig -> _I2,_sigP  --- ne(_n,_E2) ,_sig  -> ne(_n,_I2),_sigP
-neL _E1,_sig -> _I1,_sigP                    --- ne(_E1,_E2),_sig  -> ne(_I1,_E2),_sigP

-sub  _n1 |> __int32(_) _n2 |> __int32(_)     --- sub(_n1,_n2),_sig -> __sub(_n1,_n2),_sig
-subR _n |> __int32(_) _E2,_sig -> _I2,_sigP  --- sub(_n,_E2),_sig  -> sub(_n,_I2),_sigP
-subL _E1,_sig -> _I1,_sigP                   --- sub(_E1,_E2),_sig -> sub(_I1,_E2),_sigP

-plugin --- plugin(_O),_sig -> __plugin(_O),_sig
-plugin --- plugin(_O, _X),_sig -> __plugin(_O, _X),_sig
-plugin --- plugin(_O, _X, _Y),_sig -> __plugin(_O, _X, _Y),_sig
-plugin --- plugin(_O, _X, _Y, _Z),_sig -> __plugin(_O, _X, _Y, _Z),_sig

-play   --- play(_A, _B, _C),_sig -> __plugin("play", _A, _B, _C),_sig

(*  CFG rules *)
seq ::= statement^^ | statement seq 
statement ::= assign^^ | while^^ | if^^ | plugin^^ ';'^ | play^^ ';'^
assign ::= &ID ':='^ expression ';'^
while ::= 'while'^ expression 'do'^ statement
if ::= 'if'^ expression 'then'^ statement | 'if'^ expression 'then'^ statement 'else'^ statement
plugin ::= 'plugin'^ '('^ expressions^ ')'^  
play ::= 'play'^ __string ','^ __string ','^ __string
expressions ::= expression | expression ','^ expressions^
expression ::= rels^^
rels ::= adds^^ | gt^^ | ne^^
  gt ::= adds '>'^ adds
  ne ::= adds '!='^ adds 
adds  ::= operand^^ | sub^^ | add^^
  add ::= adds '+'^ operand
  sub ::= adds '-'^ operand
operand ::= __real64^^ | __int32^^ | deref^^ | __string^^ | plugin^^
deref   ::= &ID
__int32 ::= &INTEGER
__real64 ::= &REAL
__string::= &STRING_SQ

(* GCD examples *)
//!try seq(assign(a,6), seq(assign(b,9), while(ne(deref(a), deref(b)), if(gt(deref(a), deref(b)), assign(a, sub(deref(a), deref(b))), assign(b, sub(deref(b), deref(a))))))), __map
!try "a := 6; b := 9; while a != b do if a > b then a := a - b; else b := b - a;"

(* Plugin test *)
//!try "plugin('init');"
//!try "plugin('init'); plugin('play', 'B', 'A', 'D');"
//!try "plugin('init'); play 'B', 'A', 'D';" 
//!try "plugin('weird', 666); "
 