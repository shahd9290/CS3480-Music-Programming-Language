(* Reduction.art - project starter *)

!configuration -> _sig:__map

(* Term rewrite rules *)
-assignI _n |> __int32(_)                        --- assign(_X,_n),_sig -> __done, __put(_sig, _X, _n)
-assignD _n |> __real64(_)                       --- assign(_X,_n),_sig -> __done, __put(_sig, _X, _n)
-assignB _n |> __bool(_)                         --- assign(_X,_n),_sig -> __done, __put(_sig, _X, _n)
-assignR _E,_sig -> _I,_sigP                     --- assign(_X,_E),_sig -> assign(_X,_I),_sigP

-deref --- deref(_R),_sig -> __get(_sig,_R),_sig

-sequenceDone                                    --- seq(__done, _C),_sig -> _C,_sig
-sequence _C1,_sig -> _C1P,_sigP                 --- seq(_C1,_C2),_sig -> seq(_C1P,_C2),_sigP

-ifTrue                                          --- if(true,_C1,_C2),_sig -> _C1,_sig
-ifFalse                                         --- if(false,_C1,_C2),_sig -> _C2,_sig
-ifResolve _E,_sig ->_EP,_sigP                   --- if(_E,_C1,_C2),_sig -> if(_EP,_C1,_C2),_sigP

-while --- while(_E,_C),_sig -> if(_E,seq(_C,while(_E,_C)),__done),_sig

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

-and  _L |> __bool(_) _R |> __bool(_)            --- and(_L, _R),_sig -> __and(_L, _R),_sig
-andR _L |> __bool(_) _R,_sig -> _RP, _sigP      --- and(_L, _R),_sig -> and(_L, _RP),_sigP
-andL _L,_sig -> _LP, _sigP                      --- and(_L, _R),_sig -> and(_LP, _R),_sigP

-or  _L |> __bool(_) _R |> __bool(_)             --- or(_L, _R),_sig -> __or(_L, _R),_sig
-orR _L |> __bool(_) _R,_sig -> _RP, _sigP       --- or(_L, _R),_sig -> or(_L, _RP),_sigP
-orL _L,_sig -> _LP, _sigP                       --- or(_L, _R),_sig -> or(_LP, _R),_sigP

-not _B |> __bool(_)                             --- not(_B), _sig -> __not(_B), _sig
-notR _B, _sig -> _BP, _sigP                     --- not(_B), _sig -> not(_BP), _sigP
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-neI  _n1 |> __int32(_) _n2  |> __int32(_)       --- ne(_n1,_n2),_sig  -> __ne(_n1,_n2),_sig
-neD  _n1 |> __real64(_) _n2 |> __real64(_)      --- ne(_n1,_n2),_sig  -> __ne(_n1,_n2),_sig
-neRi _n  |> __int32(_)  _E2,_sig -> _I2,_sigP   --- ne(_n,_E2) ,_sig  -> ne(_n,_I2),_sigP
-neRd _n  |> __real64(_)  _E2,_sig -> _I2,_sigP  --- ne(_n,_E2) ,_sig  -> ne(_n,_I2),_sigP
-neL _E1,_sig -> _I1,_sigP                       --- ne(_E1,_E2),_sig  -> ne(_I1,_E2),_sigP

-eqI _L  |> __int32(_) _R |> __int32(_)          --- eq(_L, _R),_sig -> __eq(_L, _R),_sig // ==
-eqD _L  |> __real64(_) _R |> __real64(_)        --- eq(_L, _R),_sig -> __eq(_L, _R),_sig // ==
-eqRi _L |> __int32(_) _R,_sig -> _RP,_sigP      --- eq(_L, _R),_sig -> eq(_L, _RP),_sigP
-eqRd _L |> __real64(_) _R,_sig -> _RP,_sigP     --- eq(_L, _R),_sig -> eq(_L, _RP),_sigP
-eqL _L,_sig -> _LP,_sigP                        --- eq(_L, _R),_sig -> eq(_LP, _R),_sigP 

-gtI  _n1 |> __int32(_)  _n2 |> __int32(_)       --- gt(_n1,_n2),_sig  ->  __gt(_n1,_n2),_sig 
-gtD  _n1 |> __real64(_)  _n2 |> __real64(_)     --- gt(_n1,_n2),_sig  ->  __gt(_n1,_n2),_sig 
-gtRi _n  |> __int32(_)  _E2,_sig -> _I2,_sigP   --- gt(_n,_E2),_sig   -> gt(_n,_I2),_sigP
-gtRd _n  |> __real64(_)  _E2,_sig -> _I2,_sigP  --- gt(_n,_E2),_sig   -> gt(_n,_I2),_sigP
-gtL _E1,_sig -> _I1,_sigP                       --- gt(_E1,_E2),_sig  -> gt(_I1,_E2),_sigP

-ltI _L  |> __int32(_) _R |> __int32(_)          --- lt(_L, _R),_sig  -> __lt(_L, _R),_sig  // <
-ltD _L  |> __real64(_) _R |> __real64(_)        --- lt(_L, _R),_sig  -> __lt(_L, _R),_sig  // <
-ltRi _L |> __int32(_) _R,_sig  -> _RP,_sigP     --- lt(_L, _R),_sig  -> lt(_L, _RP),_sigP 
-ltRd _L |> __real64(_) _R,_sig  -> _RP,_sigP    --- lt(_L, _R),_sig  -> lt(_L, _RP),_sigP 
-ltL _L,_sig  -> _LP,_sigP                       --- lt(_L, _R),_sig  -> lt(_LP, _R),_sigP  

-geI _L  |> __int32(_) _R |> __int32(_)          --- ge(_L, _R),_sig  -> __ge(_L, _R),_sig  // >=
-geD _L  |> __real64(_) _R |> __real64(_)        --- ge(_L, _R),_sig  -> __ge(_L, _R),_sig  // >=
-geRi _L |> __int32(_) _R,_sig  -> _RP,_sigP     --- ge(_L, _R),_sig  -> ge(_L, _RP),_sigP 
-geRd _L |> __real64(_) _R,_sig  -> _RP,_sigP    --- ge(_L, _R),_sig  -> ge(_L, _RP),_sigP 
-geL _L,_sig  -> _LP,_sigP                       --- ge(_L, _R),_sig  -> ge(_LP, _R),_sigP  

-leI _L  |> __int32(_) _R |> __int32(_)          --- le(_L, _R),_sig  -> __le(_L, _R),_sig  // <=
-leD _L  |> __real64(_) _R |> __real64(_)        --- le(_L, _R),_sig  -> __le(_L, _R),_sig  // <=
-leRi _L |> __int32(_) _R,_sig  -> _RP,_sigP     --- le(_L, _R),_sig  -> le(_L, _RP),_sigP 
-leRd _L |> __real64(_) _R,_sig  -> _RP,_sigP    --- le(_L, _R),_sig  -> le(_L, _RP),_sigP 
-leL _L,_sig  -> _LP,_sigP                       --- le(_L, _R),_sig  -> le(_LP, _R),_sigP 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

-subI  _n1 |> __int32(_) _n2  |> __int32(_)      --- sub(_n1,_n2),_sig -> __sub(_n1,_n2),_sig
-subD  _n1 |> __real64(_) _n2 |> __real64(_)     --- sub(_n1,_n2),_sig -> __sub(_n1,_n2),_sig
-subRi _n  |> __int32(_) _E2,_sig -> _I2,_sigP   --- sub(_n,_E2),_sig  -> sub(_n,_I2),_sigP
-subRd _n  |> __real64(_) _E2,_sig -> _I2,_sigP  --- sub(_n,_E2),_sig  -> sub(_n,_I2),_sigP
-subL _E1,_sig -> _I1,_sigP                      --- sub(_E1,_E2),_sig -> sub(_I1,_E2),_sigP

-addI _L  |> __int32(_) _R  |> __int32(_)        --- add(_L, _R),_sig -> __add(_L, _R),_sig
-addD _L  |> __real64(_) _R |> __real64(_)       --- add(_L, _R),_sig -> __add(_L, _R),_sig
-addRi _L |> __int32(_) _R,_sig -> _RP,_sigP     --- add(_L, _R),_sig -> add(_L, _RP),_sigP
-addRi _L |> __real64(_) _R,_sig -> _RP,_sigP    --- add(_L, _R),_sig -> add(_L, _RP),_sigP
-addL _L,_sig -> _LP,_sigP                       --- add(_L, _R),_sig -> add(_LP, _R),_sigP

-mulI _L  |> __int32(_) _R  |> __int32(_)        --- mul(_L, _R),_sig -> __mul(_L, _R),_sig
-mulD _L  |> __real64(_) _R |> __real64(_)       --- mul(_L, _R),_sig -> __mul(_L, _R),_sig
-mulRi _L |> __int32(_) _R,_sig -> _RP,_sigP     --- mul(_L, _R),_sig -> mul(_L, _RP),_sigP
-mulRi _L |> __real64(_) _R,_sig -> _RP,_sigP    --- mul(_L, _R),_sig -> mul(_L, _RP),_sigP
-mulL _L,_sig -> _LP,_sigP                       --- mul(_L, _R),_sig -> mul(_LP, _R),_sigP


-divI _L  |> __int32(_) _R  |> __int32(_)        --- div(_L, _R),_sig -> __div(_L, _R),_sig
-divD _L  |> __real64(_) _R |> __real64(_)       --- div(_L, _R),_sig -> __div(_L, _R),_sig
-divRi _L |> __int32(_) _R,_sig -> _RP,_sigP     --- div(_L, _R),_sig -> div(_L, _RP),_sigP
-divRi _L |> __real64(_) _R,_sig -> _RP,_sigP    --- div(_L, _R),_sig -> div(_L, _RP),_sigP
-divL _L,_sig -> _LP,_sigP                       --- div(_L, _R),_sig -> div(_LP, _R),_sigP

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

-preinc                                          --- preinc(_n), _sig -> assign(_n, add(deref(_n), 1)), _sig
-predec                                          --- predec(_n), _sig -> assign(_n, sub(deref(_n), 1)), _sig

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

-plugin --- plugin(_O),_sig -> __plugin(_O),_sig
-plugin --- plugin(_O, _X),_sig -> __plugin(_O, _X),_sig
-plugin --- plugin(_O, _X, _Y),_sig -> __plugin(_O, _X, _Y),_sig
-plugin --- plugin(_O, _X, _Y, _Z),_sig -> __plugin(_O, _X, _Y, _Z),_sig

-play   --- play(_A, _B, _C),_sig -> __plugin("play", _A, _B, _C),_sig

(*  CFG rules *)
seq ::= statement^^ | statement seq 
statement ::= assign^^ | while^^ | if^^ | plugin^^ ';'^ | play^^ ';'^ | expression^^ ';'^
assign ::= &ID ':='^ expression ';'^
while ::= 'while'^ expression 'do'^ statement
if ::= 'if'^ expression 'then'^ statement | 'if'^ expression 'then'^ statement 'else'^ statement
plugin ::= 'plugin'^ '('^ expressions^ ')'^  
play ::= 'play'^ __string ','^ __string ','^ __string
expressions ::= expression | expression ','^ expressions^
expression ::= rels^^
rels ::= adds^^ | lt^^ | gt^^ | ne^^ | eq^^ | le^^ | ge^^
  gt ::= adds '>'^ adds
  lt ::= adds '<'^ adds
  ge ::= adds '>='^ adds
  le ::= adds '<='^ adds
  ne ::= adds '!='^ adds
  eq ::= adds '=='^ adds

adds  ::= operand^^ | sub^^ | add^^ | mul^^ | div^^
  add ::= adds '+'^ operand
  sub ::= adds '-'^ operand
  mul ::= adds '*'^ operand
  div ::= adds '/'^ operand
operand ::= __real64^^ | __int32^^ | __bool^^ | deref^^ | __string^^ | plugin^^
deref   ::= &ID
__int32 ::= &INTEGER
__real64 ::= &REAL
__bool ::= 'true' | 'false'
__string::= &STRING_SQ

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// !try assign(a, 10), __map = __done, {a=10}
// !try assign(b, 5.0), __map = __done, {b=5.0}
// !try assign(c, true),__map = __done, {c=true}
// !try sub(10, 5),__map = 5, {=}
// !try sub(15.0, sub(10.0, 5.0)),__map = 10.0, {=}

// !try add(10, 5),__map = 15, {=}
// !try add(15.0, add(10.0, 5.0)),__map = 30.0, {=}

// !try mul(10, 5),__map = 50, {=}
// !try mul(15.0, mul(10.0, 5.0)),__map = 750.0, {=}

// !try div(10, 5),__map = 2, {=}
// !try div(15, 2),__map = 7, {=} // float answer
// !try div(15.0, div(10.0, 5.0)),__map = 7.5, {=}

// !try "10 + 5;" = 15, {=}
// !try "10 - 5;" = 5, {=}
// !try "10 * 5;" = 50, {=}
// !try "10 / 5;" = 2, {=}

// !try eq(5, 5), __map = true, {=}
// !try lt(3, 5), __map = true, {=}
// !try le(3, 5), __map = true, {=}
// !try le(5, 5), __map = true, {=}
// !try ge(5, 5), __map = true, {=}
// !try ge(10, 5), __map = true, {=}

// !try eq(5, 4), __map = false, {=}
// !try lt(5, 3), __map = false, {=}
// !try le(5, 3), __map = false, {=}
// !try ge(5, 10), __map = false, {=}

// !try and(true, true),__map = true, {=}
// !try and(true, false),__map = false, {=}
// !try and(false, true),__map = false, {=}
// !try and(false, false),__map = false, {=}
// !try and(gt(9, 5), lt(9, 10)),__map = true, {=}

// !try or(true, true),__map = true, {=}
// !try or(true, false),__map = true, {=}
// !try or(false, true),__map = true, {=}
// !try or(false, false),__map = false, {=}
// !try or(gt(9, 5), lt(9, 10)),__map = true, {=}

// !try not(true),__map = false, {=}
// !try not(false),__map = true, {=}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// !try inc(5), __map = 6, {=}
// !try dec(6), __map = 5, {=}
// !try seq(assign(a, 6), inc(deref(a))), __map = 7, {a=6}
// !try seq(assign(a, 6), dec(deref(a))), __map = 5, {a=6}

//!try "x := 5; x := x + 1;" = __done, {x=6}
!try seq(assign(x, 5), preinc(x)), __map = __done, {x=6}
!try seq(assign(x, 5), predec(x)), __map = __done, {x=4}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
(* GCD examples *)
//!try seq(assign(a,6), seq(assign(b,9), while(ne(deref(a), deref(b)), if(gt(deref(a), deref(b)), assign(a, sub(deref(a), deref(b))), assign(b, sub(deref(b), deref(a))))))), __map
//!try "a := 6; b := 9; while a != b do if a > b then a := a - b; else b := b - a;"


(* Plugin test *)
//!try "plugin('init');"
//!try "plugin('init'); plugin('play', 'B', 'A', 'D');"
//!try "plugin('init'); play 'B', 'A', 'D';" 
//!try "plugin('weird', 666); "
 