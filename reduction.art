(* Reduction.art - project starter *)

!configuration -> _sig:__map

(* Term rewrite rules *)
-assignI _n |> __int32(_)                             --- assign(_X,_n),_sig -> __done, __put(_sig, _X, _n)
-assignD _n |> __real64(_)                            --- assign(_X,_n),_sig -> __done, __put(_sig, _X, _n)
-assignB _n |> __bool(_)                              --- assign(_X,_n),_sig -> __done, __put(_sig, _X, _n)
-assignLValue _n |> __list(_)                         --- assign(_X,_n),_sig -> __done, __put(_sig, _X, _n)
-assignLEmpty _n |> __list                            --- assign(_X,_n),_sig -> __done, __put(_sig, _X, _n)

-assignR _E,_sig -> _I,_sigP                          --- assign(_X,_E),_sig -> assign(_X,_I),_sigP

-deref                                                --- deref(_R),_sig -> __get(_sig,_R),_sig

-sequenceDone  _C |> __int32(_)                       --- seq(__done, _C),_sig -> __done,_sig
-sequenceDone                                         --- seq(__done, _C),_sig -> _C,_sig
-sequenceI _n |> __int32(_) _R,_sig -> _RP, _sigP     --- seq(_n, _R), _sig -> seq(_RP, _n), _sigP
-sequence _C1,_sig -> _C1P,_sigP                      --- seq(_C1,_C2),_sig -> seq(_C1P,_C2),_sigP

-ifTrue                                               --- if(true,_C1,_C2),_sig -> _C1,_sig
-ifFalse                                              --- if(false,_C1,_C2),_sig -> _C2,_sig
-ifResolve _E,_sig ->_EP,_sigP                        --- if(_E,_C1,_C2),_sig -> if(_EP,_C1,_C2),_sigP
-ifElif                                               --- if(_E1, _C1, _E2, _C2, _C3),_sig -> if(_E1, _C1, if(_E2, _C2, _C3)),_sig

-while                                                --- while(_E,_C),_sig -> if(_E,seq(_C,while(_E,_C)),__done),_sig
-for                                                  --- for(_I, _C, _U, _B), _sig -> seq(_I, while(_C, seq(_B, _U))), _sig
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

-and  _L |> __bool(_) _R |> __bool(_)                 --- and(_L, _R),_sig -> __and(_L, _R),_sig
-andR _L |> __bool(_) _R,_sig -> _RP, _sigP           --- and(_L, _R),_sig -> and(_L, _RP),_sigP
-andL _L,_sig -> _LP, _sigP                           --- and(_L, _R),_sig -> and(_LP, _R),_sigP

-or  _L |> __bool(_) _R |> __bool(_)                  --- or(_L, _R),_sig -> __or(_L, _R),_sig
-orR _L |> __bool(_) _R,_sig -> _RP, _sigP            --- or(_L, _R),_sig -> or(_L, _RP),_sigP
-orL _L,_sig -> _LP, _sigP                            --- or(_L, _R),_sig -> or(_LP, _R),_sigP

-not _B |> __bool(_)                                  --- not(_B), _sig -> __not(_B), _sig
-notR _B, _sig -> _BP, _sigP                          --- not(_B), _sig -> not(_BP), _sigP

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-neI  _n1 |> __int32(_) _n2  |> __int32(_)            --- ne(_n1,_n2),_sig  -> __ne(_n1,_n2),_sig 
-neD  _n1 |> __real64(_) _n2 |> __real64(_)           --- ne(_n1,_n2),_sig  -> __ne(_n1,_n2),_sig 
-neD  _n1 |> __string(_) _n2 |> __string(_)           --- ne(_n1,_n2),_sig  -> __ne(_n1,_n2),_sig 
-neRi _n  |> __int32(_)  _E2,_sig -> _I2,_sigP        --- ne(_n,_E2) ,_sig  -> ne(_n,_I2),_sigP
-neRd _n  |> __real64(_)  _E2,_sig -> _I2,_sigP       --- ne(_n,_E2) ,_sig  -> ne(_n,_I2),_sigP
-neRd _n  |> __string(_)  _E2,_sig -> _I2,_sigP       --- ne(_n,_E2) ,_sig  -> ne(_n,_I2),_sigP
-neL _E1,_sig -> _I1,_sigP                            --- ne(_E1,_E2),_sig  -> ne(_I1,_E2),_sigP

-eqI _L  |> __int32(_) _R |> __int32(_)               --- eq(_L, _R),_sig -> __eq(_L, _R),_sig // ==
-eqD _L  |> __real64(_) _R |> __real64(_)             --- eq(_L, _R),_sig -> __eq(_L, _R),_sig // ==
-eqD _L  |> __string(_) _R |> __string(_)             --- eq(_L, _R),_sig -> __eq(_L, _R),_sig // ==
-eqRi _L |> __int32(_) _R,_sig -> _RP,_sigP           --- eq(_L, _R),_sig -> eq(_L, _RP),_sigP
-eqRd _L |> __real64(_) _R,_sig -> _RP,_sigP          --- eq(_L, _R),_sig -> eq(_L, _RP),_sigP
-eqRd _L |> __string(_) _R,_sig -> _RP,_sigP          --- eq(_L, _R),_sig -> eq(_L, _RP),_sigP
-eqL _L,_sig -> _LP,_sigP                             --- eq(_L, _R),_sig -> eq(_LP, _R),_sigP 

-gtI  _n1 |> __int32(_)  _n2 |> __int32(_)            --- gt(_n1,_n2),_sig  ->  __gt(_n1,_n2),_sig 
-gtD  _n1 |> __real64(_)  _n2 |> __real64(_)          --- gt(_n1,_n2),_sig  ->  __gt(_n1,_n2),_sig 
-gtRi _n  |> __int32(_)  _E2,_sig -> _I2,_sigP        --- gt(_n,_E2),_sig   -> gt(_n,_I2),_sigP
-gtRd _n  |> __real64(_)  _E2,_sig -> _I2,_sigP       --- gt(_n,_E2),_sig   -> gt(_n,_I2),_sigP
-gtL _E1,_sig -> _I1,_sigP                            --- gt(_E1,_E2),_sig  -> gt(_I1,_E2),_sigP

-ltI _L  |> __int32(_) _R |> __int32(_)               --- lt(_L, _R),_sig  -> __lt(_L, _R),_sig  // <
-ltD _L  |> __real64(_) _R |> __real64(_)             --- lt(_L, _R),_sig  -> __lt(_L, _R),_sig  // <
-ltRi _L |> __int32(_) _R,_sig  -> _RP,_sigP          --- lt(_L, _R),_sig  -> lt(_L, _RP),_sigP 
-ltRd _L |> __real64(_) _R,_sig  -> _RP,_sigP         --- lt(_L, _R),_sig  -> lt(_L, _RP),_sigP 
-ltL _L,_sig  -> _LP,_sigP                            --- lt(_L, _R),_sig  -> lt(_LP, _R),_sigP  

-geI _L  |> __int32(_) _R |> __int32(_)               --- ge(_L, _R),_sig  -> __ge(_L, _R),_sig  // >=
-geD _L  |> __real64(_) _R |> __real64(_)             --- ge(_L, _R),_sig  -> __ge(_L, _R),_sig  // >=
-geRi _L |> __int32(_) _R,_sig  -> _RP,_sigP          --- ge(_L, _R),_sig  -> ge(_L, _RP),_sigP 
-geRd _L |> __real64(_) _R,_sig  -> _RP,_sigP         --- ge(_L, _R),_sig  -> ge(_L, _RP),_sigP 
-geL _L,_sig  -> _LP,_sigP                            --- ge(_L, _R),_sig  -> ge(_LP, _R),_sigP  

-leI _L  |> __int32(_) _R |> __int32(_)               --- le(_L, _R),_sig  -> __le(_L, _R),_sig  // <=
-leD _L  |> __real64(_) _R |> __real64(_)             --- le(_L, _R),_sig  -> __le(_L, _R),_sig  // <=
-leRi _L |> __int32(_) _R,_sig  -> _RP,_sigP          --- le(_L, _R),_sig  -> le(_L, _RP),_sigP 
-leRd _L |> __real64(_) _R,_sig  -> _RP,_sigP         --- le(_L, _R),_sig  -> le(_L, _RP),_sigP 
-leL _L,_sig  -> _LP,_sigP                            --- le(_L, _R),_sig  -> le(_LP, _R),_sigP 

-neg _N |> __int32(_) gt(_N,0),_sig -> true,_sig      --- neg(_N),_sig -> __neg(_N), _sig
-neg _N |> __real64(_) gt(_N,0),_sig -> true,_sig     --- neg(_N),_sig -> __neg(_N), _sig
-neg _N,_sig -> _NP, _sigP                            --- neg(_N),_sig -> neg(_NP), _sigP

-pos _N |> __int32(_) lt(_N,0),_sig -> true,_sig      --- pos(_N),_sig -> __neg(_N), _sig
-pos _N |> __real64(_) lt(_N,0),_sig -> true,_sig     --- pos(_N),_sig -> __neg(_N), _sig
-pos _N,_sig -> _NP, _sigP                            --- pos(_N),_sig -> pos(_NP), _sigP

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

-subI  _n1 |> __int32(_) _n2  |> __int32(_)           --- sub(_n1,_n2),_sig -> __sub(_n1,_n2),_sig 
-subD  _n1 |> __real64(_) _n2 |> __real64(_)          --- sub(_n1,_n2),_sig -> __sub(_n1,_n2),_sig 
-subRi _n  |> __int32(_) _E2,_sig -> _I2,_sigP        --- sub(_n,_E2),_sig  -> sub(_n,_I2),_sigP
-subRd _n  |> __real64(_) _E2,_sig -> _I2,_sigP       --- sub(_n,_E2),_sig  -> sub(_n,_I2),_sigP
-subL _E1,_sig -> _I1,_sigP                           --- sub(_E1,_E2),_sig -> sub(_I1,_E2),_sigP

-addI _L  |> __int32(_) _R  |> __int32(_)             --- add(_L, _R),_sig -> __add(_L, _R),_sig 
-addD _L  |> __real64(_) _R |> __real64(_)            --- add(_L, _R),_sig -> __add(_L, _R),_sig 
-addRi _L |> __int32(_) _R,_sig -> _RP,_sigP          --- add(_L, _R),_sig -> add(_L, _RP),_sigP
-addRi _L |> __real64(_) _R,_sig -> _RP,_sigP         --- add(_L, _R),_sig -> add(_L, _RP),_sigP
-addL _L,_sig -> _LP,_sigP                            --- add(_L, _R),_sig -> add(_LP, _R),_sigP

-mulI _L  |> __int32(_) _R  |> __int32(_)             --- mul(_L, _R),_sig -> __mul(_L, _R),_sig 
-mulD _L  |> __real64(_) _R |> __real64(_)            --- mul(_L, _R),_sig -> __mul(_L, _R),_sig 
-mulRi _L |> __int32(_) _R,_sig -> _RP,_sigP          --- mul(_L, _R),_sig -> mul(_L, _RP),_sigP
-mulRi _L |> __real64(_) _R,_sig -> _RP,_sigP         --- mul(_L, _R),_sig -> mul(_L, _RP),_sigP
-mulL _L,_sig -> _LP,_sigP                            --- mul(_L, _R),_sig -> mul(_LP, _R),_sigP


-divI _L  |> __int32(_) _R  |> __int32(_)             --- div(_L, _R),_sig -> __div(_L, _R),_sig 
-divD _L  |> __real64(_) _R |> __real64(_)            --- div(_L, _R),_sig -> __div(_L, _R),_sig 
-divRi _L |> __int32(_) _R,_sig -> _RP,_sigP          --- div(_L, _R),_sig -> div(_L, _RP),_sigP
-divRi _L |> __real64(_) _R,_sig -> _RP,_sigP         --- div(_L, _R),_sig -> div(_L, _RP),_sigP
-divL _L,_sig -> _LP,_sigP                            --- div(_L, _R),_sig -> div(_LP, _R),_sigP

-modI _L  |> __int32(_) _R  |> __int32(_)             --- mod(_L, _R),_sig -> __mod(_L, _R),_sig 
-modD _L  |> __real64(_) _R |> __real64(_)            --- mod(_L, _R),_sig -> __mod(_L, _R),_sig 
-modRi _L |> __int32(_) _R,_sig -> _RP,_sigP          --- mod(_L, _R),_sig -> mod(_L, _RP),_sigP
-modRi _L |> __real64(_) _R,_sig -> _RP,_sigP         --- mod(_L, _R),_sig -> mod(_L, _RP),_sigP
-modL _L,_sig -> _LP,_sigP                            --- mod(_L, _R),_sig -> mod(_LP, _R),_sigP

-expI _L  |> __int32(_) _R  |> __int32(_)             --- exp(_L, _R),_sig -> __exp(_L, _R),_sig 
-expD _L  |> __real64(_) _R |> __real64(_)            --- exp(_L, _R),_sig -> __exp(_L, _R),_sig 
-expRi _L |> __int32(_) _R,_sig -> _RP,_sigP          --- exp(_L, _R),_sig -> exp(_L, _RP),_sigP
-expRi _L |> __real64(_) _R,_sig -> _RP,_sigP         --- exp(_L, _R),_sig -> exp(_L, _RP),_sigP
-expL _L,_sig -> _LP,_sigP                            --- exp(_L, _R),_sig -> exp(_LP, _R),_sigP

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

-preinc                                               --- preinc(_n), _sig -> assign(_n, add(deref(_n), 1)), _sig 
-predec                                               --- predec(_n), _sig -> assign(_n, sub(deref(_n), 1)), _sig 
-postinc deref(_n),_sig -> _N,_sig 
         _N |> __int32(_)
         assign(_n, __add(_N, 1)),_sig -> _,_sigP     --- postinc(_n), _sig -> _N, _sigP 

-postdec deref(_n),_sig -> _N,_sig 
         _N |> __int32(_)
         assign(_n, __sub(_N, 1)),_sig -> _,_sigP     --- postdec(_n), _sig -> _N, _sigP 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Length
-listLenE   _L |> __list                              --- length(_L), _sig -> 0 , _sig
-listLenV   _L |> __list(_)                           --- length(_L), _sig -> __card(_L) , _sig
-listLenD   deref(_L), _sig -> _LI,_sigP              --- length(_L), _sig -> length(_LI) , _sigP

// Insert
-listAddEmp _L|>__list _V |> __int32(_)               --- insert(_L, _I, _V),_sig -> assign(_L, __put(_L, _I, _V)),_sig
-listAddEmp _L|>__list _V |> __real64(_)              --- insert(_L, _I, _V),_sig -> assign(_L, __put(_L, _I, _V)),_sig
-listAddEmp _L|>__list _V |> __string(_)              --- insert(_L, _I, _V),_sig -> assign(_L, __put(_L, _I, _V)),_sig
-listAddEmp _L|>__list _V |> __list                   --- insert(_L, _I, _V),_sig -> assign(_L, __put(_L, _I, _V)),_sig
-listAddEmp _L|>__list _V |> __list(_)                --- insert(_L, _I, _V),_sig -> assign(_L, __put(_L, _I, _V)),_sig
-listAddVal _L|>__list(_) _V |> __int32(_)            --- insert(_L, _I, _V),_sig -> assign(_L, __put(_L, _I, _V)),_sig
-listAddVal _L|>__list(_) _V |> __real64(_)           --- insert(_L, _I, _V),_sig -> assign(_L, __put(_L, _I, _V)),_sig
-listAddVal _L|>__list(_) _V |> __string(_)           --- insert(_L, _I, _V),_sig -> assign(_L, __put(_L, _I, _V)),_sig
-listAddVal _L|>__list(_) _V |> __list                --- insert(_L, _I, _V),_sig -> assign(_L, __put(_L, _I, _V)),_sig
-listAddVal _L|>__list(_) _V |> __list(_)             --- insert(_L, _I, _V),_sig -> assign(_L, __put(_L, _I, _V)),_sig
-listAddDer deref(_L),_sig -> _LI,_sig
            _V |> __int32(_)                          --- insert(_L, _I, _V),_sig -> assign(_L, __put(_LI, _I, _V)),_sig
-listAddDer deref(_L),_sig -> _LI,_sig
            _V |> __real64(_)                         --- insert(_L, _I, _V),_sig -> assign(_L, __put(_LI, _I, _V)),_sig
-listAddDer deref(_L),_sig -> _LI,_sig
            _V |> __string(_)                         --- insert(_L, _I, _V),_sig -> assign(_L, __put(_LI, _I, _V)),_sig
-listAddDer deref(_L),_sig -> _LI,_sig
            _V |> __list                              --- insert(_L, _I, _V),_sig -> assign(_L, __put(_LI, _I, _V)),_sig
-listAddDer deref(_L),_sig -> _LI,_sig
            _V |> __list(_)                           --- insert(_L, _I, _V),_sig -> assign(_L, __put(_LI, _I, _V)),_sig
-listAddRV  _V, _sig -> _VP, _sigP                    --- insert(_L, _I, _V),_sig -> insert(_L, _I, _VP), _sig
-listAddRI  _I, _sig -> _IP, _sigP                    --- insert(_L, _I, _V),_sig -> insert(_L, _IP, _V), _sig

// Append
-listAppEmp _L|>__list                                --- append(_L, _V),_sig -> insert(_L, 0, _V),_sig
-listAppVal _L|>__list(_) length(_L),_sig -> _I       --- append(_L, _V),_sig -> __put(_LI, _I, _V),_sig
-listAppDer deref(_L),_sig -> _LI,_sig 
            length(_LI),_sig -> _N,_sig
            _N |> __int32(_)                          --- append(_L, _V),_sig -> insert(_L, _N, _V), _sig   
-listAppR  _V,_sig -> _VP, _sigP                      --- append(_L, _V),_sig -> append(_L, _VP),_sigP

// Get
-listGetEmp _L |> __list _I |> __int32(_)             --- get(_L, _I),_sig -> __empty, _sig
-listGetVal _L |> __list(_) _I |>__int32(_)           --- get(_L, _I),_sig -> __get(_L, _I),_sig
-listGetDer deref(_L),_sig->_LI,_sig _I|>__int32(_)   --- get(_L, _I),_sig -> __get(_LI, _I),_sig
-listGetRI  _I, _sig -> _IP, _sigP                    --- get(_L, _I),_sig -> get(_L, _IP),_sigP

// Remove
-listRemEmp _L|>__list                                --- remove(_L, _I),_sig -> __empty,_sig
-listRemVal _L|>__list(_) _I |> __int32(_)            --- remove(_L, _I),_sig -> __remove(_L, _I),_sig
-listRemDer deref(_L),_sig -> _LI,_sig
            _I |> __int32(_)                          --- remove(_L, _I),_sig -> assign(_L, __remove(_LI, _I)),_sig
-listRemRI  _I, _sig -> _IP, _sigP                    --- remove(_L, _I),_sig -> remove(_L, _IP), _sig

// Pop - Remove from 0
-listPop                                              --- pop(_L),_sig -> remove(_L, 0), _sig

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-plugin                                               --- plugin(_O),_sig -> __plugin(_O),_sig 
-plugin                                               --- plugin(_O, _X),_sig -> __plugin(_O, _X),_sig 
-plugin                                               --- plugin(_O, _X, _Y),_sig -> __plugin(_O, _X, _Y),_sig 
-plugin                                               --- plugin(_O, _X, _Y, _Z),_sig -> __plugin(_O, _X, _Y, _Z),_sig 

-play                                                 --- play(_A, _B, _C),_sig -> __plugin("play", _A, _B, _C),_sig 

(*  CFG rules *)
seq ::= statement^^ | statement seq 
statement ::= assign^^ | while^^ | for^^ | if^^ | plugin^^ ';'^ | play^^ ';'^ | expression^^ ';'^ | prepost^^ ';'^
assign ::= &ID ':='^ expression ';'^ | &ID ':='^ __list ';'^
while ::= 'while'^ expression 'do'^ statement
for ::= 'for'^ '('^ assign expression ';'^ prepost ')'^ 'do'^ statement
if ::= 'if'^ expression 'then'^ statement | 'if'^ expression 'then'^ statement 'else'^ statement | 'if'^ expression 'then'^ statement 'otherwise if'^ expression 'then'^ statement 'else'^ statement

plugin ::= 'plugin'^ '('^ expressions^ ')'^  
play ::= 'play'^ __string ','^ __string ','^ __string
expressions ::= expression | expression ','^ expressions^
expression ::= e0^^ | logic^^ | '['^ __list^^ ']'^
logic ::= boolean^^ | and^^ | or^^ | not^^
  and ::= boolean '&&'^ boolean
  or ::= boolean '||'^ boolean
  not ::= '!'^ boolean
operand ::= __real64^^ | __int32^^ | deref^^ | __string^^ | plugin^^
boolean ::= __bool^^
deref   ::= &ID
prepost ::= preinc^^ | predec^^ | postinc^^ | postdec^^ 
  preinc ::= '++'^ &ID
  predec ::= '--'^ &ID
  postinc ::= &ID '++'^
  postdec ::= &ID '--'^

e0 ::= e1^^ |
    e1 gt^^ e1 | (*Greater than *)
    e1 lt^^ e1 | (*Less than *)
    e1 ge^^ e1 | (*Greater than or equals*)
    e1 le^^ e1 | (*Less than or equals *)
    e1 eq^^ e1 | (*Equal to *)
    e1 ne^^ e1 (*Not equal to *)

e1 ::= e2^^ |
    e1 add^^ e2 | (*Add *)
    e1 sub^^ e2 (*Subtract *)

e2 ::= e3^^ |
    e2 mul^^ e3 | (*Multiply *)
    e2 div^^ e3 | (*Divide *)
    e2 mod^^ e3 (*Mod *)

e3 ::= e4^^ |
    pos^^ e3 | (*Posite *)
    neg^^ e3 (*Negate *)

e4 ::= e5^^ |
    e5 exp^^ e4 (*exponentiate *)

e5 ::= __int32^^ | __real64^^ | (*Integer literal *)
     '('^ e1^^ ')'^ (*Parenthesised expression *)


gt ::= '>'^
lt ::= '<'^
ge ::= '>='^
le ::= '<='^
eq ::= '=='^
ne ::= '!='^
add ::= '+'^
sub ::= '-'^
mul ::= '*'^
div ::= '/'^
mod ::= '%'^
exp ::= '**'^
pos ::= '+'^
neg ::= '-'^
__int32 ::= &INTEGER
__real64 ::= &REAL
__bool ::= 'true' | 'false'
__string::= &STRING_SQ
__list ::= #^ | __l
__l ::= e0 | e0 ','^ __l
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// !try assign(a, 10), __map= __done, {a=10}
// !try assign(b, 5.0), __map= __done, {b=5.0}
// !try assign(c, true),__map= __done, {c=true}
// !try sub(10, 5),__map= 5, {=}
// !try sub(15.0, sub(10.0, 5.0)),__map= 10.0, {=}


// !try add(10, 5),__map= 15, {=}
// !try add(15.0, add(10.0, 5.0)),__map= 30.0, {=}

// !try mul(10, 5),__map= 50, {=}
// !try mul(15.0, mul(10.0, 5.0)),__map= 750.0, {=}

// !try div(10, 5),__map= 2, {=}
// !try div(15, 2),__map= 7, {=} // float answer
// !try div(15.0, div(10.0, 5.0)),__map= 7.5, {=}

// !try mod(100.0, 3.0), __map= 1.0, {=}
// !try "10 % 4;" = 2, {=}

// !try "10 + 5;" = 15, {=}
// !try "10 - 5;" = 5, {=}
// !try "10 * 5;" = 50, {=}
// !try "10 / 5;" = 2, {=}

// !try "3 + 4 * 5;" = 23, {=}
// !try "(3 + 4) * 5;" = 35, {=}
// !try "2**2" = 4, {=}
// !try "(8 + (6 - 2**2)) / 5;" = 2, {=}
// !try "((8 + 6) - 2**2) / 5;" = 2, {=}
// !try "-5;" = -5, {=}
// !try "+-5;" = 5, {=}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// !try eq(5, 5), __map= true, {=}
// !try lt(3, 5), __map= true, {=}
// !try le(3, 5), __map= true, {=}
// !try le(5, 5), __map= true, {=}
// !try ge(5, 5), __map= true, {=}
// !try ge(10, 5), __map= true, {=}

// !try eq(5, 4), __map= false, {=}
// !try lt(5, 3), __map= false, {=}
// !try le(5, 3), __map= false, {=}
// !try ge(5, 10), __map= false, {=}

// !try and(true, true),__map= true, {=}
// !try and(true, false),__map= false, {=}
// !try and(false, true),__map= false, {=}
// !try and(false, false),__map= false, {=}
// !try and(gt(9, 5), lt(9, 10)),__map= true, {=}

// !try or(true, true),__map= true, {=}
// !try or(true, false),__map= true, {=}
// !try or(false, true),__map= true, {=}
// !try or(false, false),__map= false, {=}
// !try or(gt(9, 5), lt(9, 10)),__map= true, {=}

// !try not(true),__map= false, {=}
// !try not(false),__map= true, {=}

// !try "true && true;" = true, {=}
// !try "true || false;" = true, {=}
// !try "!false;" = true, {=}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// !try "x := 5; x := x + 1;" = __done, {x=6}
// !try seq(assign(x, 5), preinc(x)), __map= __done, {x=6}
// !try seq(assign(x, 5), predec(x)), __map= __done, {x=4}
// !try "x := 5; ++x;" = __done, {x=6}
// !try "x := 5; --x;" = __done, {x=4}
// !try seq(assign(x, 5), postinc(x)),__map= 5, {x=6}
// !try seq(assign(x, 5), postdec(x)),__map= 5, {x=4}
// !try "x := 5; x++;" = 5, {x=6}
// !try "x := 5; x--;" = 5, {x=4}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// !try for(assign(x, 0), lt(deref(x), 5), postinc(x), seq(plugin("init"),plugin("ding"))), __map
// !try seq(assign(i, 0), while(lt(deref(i), 5), seq(plugin("init"), seq(plugin("ding"), postinc(i))))),__map
// !try "plugin('init');"
// !try "for(x := 0; x < 5; x++) do plugin('ding');"

// !try seq(assign(x, 5), if(lt(deref(x), 5), assign(x, 10), gt(deref(x), 5), assign(x, 0), assign(x, -1))), __map
// !try "x:= 10; if x < 5 then x:= 10; otherwise if x > 5 then x := 5; else x := 0;" = __done, {x=5}
// !try "x:= 4; if x < 5 then x:= 10; otherwise if x > 5 then x := 5; else x := 0;" = __done, {x=10}
// !try "x:= 5; if x < 5 then x:= 10; otherwise if x > 5 then x := 5; else x := 0;" = __done, {x=0}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// !try assign(x, []), __map = __done, {x=[]}
// !try assign(x, [1,2,3]),__map = __done, {x=[1,2,3]}

// !try insert(x, 0, 1), {x=[]} = __done, {x=[1]}
// !try seq(assign(x, []), insert(x, 0, 1)), __map = __done, {x=[1]}
// !try seq(assign(x, []), seq(insert(x, 0, 1), seq(insert(x, 0, 2), insert(x, 0, 3)))), __map = __done, {x=[3,2,1]}
// !try seq(assign(x, []), seq(insert(x, 0, 1), seq(insert(x, 1, 2), insert(x, 2, 3)))), __map = __done, {x=[1,2,3]}

// !try length([1,2,3]), __map = 3, {=}
// !try seq(assign(x, [1,2,3]), length(x)), __map = 3, {x=[1,2,3]}
// !try length([]),__map = 0, {=}
// !try length([1]),__map = 1, {=}

// !try seq(assign(x, []), append(x, 1)), __map = __done, {x=[1]}
// !try insert(x, 0, 1), {x=[]} = __done, {x=[1]}
// !try seq(assign(x, []), append(x, 1)), __map = __done, {x=[1]}
// !try seq(assign(x, [1]), append(x, 1)), __map = __done, {x=[1,1]}
// !try seq(assign(x, []), insert(x, 0, 1)), __map = __done, {x=[1]}
// !try seq(assign(x, 5), seq(assign(l, []), append(l, deref(x)))),__map
// !try seq(assign(l, []), for(assign(x, 0), lt(deref(x), 5), postinc(x), append(l, deref(x)))),__map = __done, {l=[0,1,2,3,4], x=5}

// !try insert(x, 0, 1.0), {x=[]} = __done, {x=[1.0]}
// !try append(x, 1.0), {x=[]} = __done, {x=[1.0]}

// !try insert(x, 0, "a"), {x=[]} = __done, {x=["a"]}
// !try append(x, "a"), {x=[]} = __done, {x=["a"]}

// !try get([], 0),__map = __empty, {=}
// !try get([1], 0),__map = 1, {=}
// !try get([1,2,3,4,5], 2),__map = 3, {=}
// !try get(x, 0), {x=[1]} = 1, {x=[1]}
// !try get(x, 2), {x=[1,2,3,4,5]} = 3, {x=[1,2,3,4,5]}
// !try get(x, add(1,1)), {x=[1,2,3,4,5]} = 3, {x=[1,2,3,4,5]}

// !try remove([], 0), __map = __empty, {=}
// !try remove([1], 0), __map = [], {=}
// !try remove([1,2,3], 2), __map = [1,2], {=}
// !try remove(x, 2), {x=[1,2,3]} = __done, {x=[1,2]}
// !try remove(x, add(1,1)), {x=[1,2,3]} = __done, {x=[1,2]}

// !try pop([]), __map = __empty, {=}
// !try pop([1]), __map = [], {=}
// !try pop([1,2,3]), __map = [2,3], {=}
// !try pop(x), {x=[1,2,3]} = __done, {x=[2,3]}
// !try pop(x), {x=[1,2,3]} = __done, {x=[2,3]}
// !try append(x, [2]), {x=[]} = __done, {x=[[2]]}

!trace 3
!try "x := [];" = __done, {x=[]}
!try "x := [1];" = __done, {x=[1]}
!try "x := [1,2,3,4];" = __done, {x=[1,2,3,4]}
// !printraw term [1,2,3,4]
!try "x := [2+2, 3+3];" = __done, {x=[4, 6]}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
(* GCD examples *)
//!try seq(assign(a,6), seq(assign(b,9), while(ne(deref(a), deref(b)), if(gt(deref(a), deref(b)), assign(a, sub(deref(a), deref(b))), assign(b, sub(deref(b), deref(a))))))), __map
//!try "a := 6; b := 9; while a != b do if a > b then a := a - b; else b := b - a;"


(* Plugin test *)
//!try "plugin('init');"
//!try "plugin('init'); plugin('play', 'B', 'A', 'D');"
//!try "plugin('init'); play 'B', 'A', 'D';" 
//!try "plugin('weird', 666); "

