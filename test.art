// !try "a := 6; b := 9; while a != b do if a > b then a := a - b; else b := b - a; gcd := a; plugin('init'); plugin('ding'); ASSERT(a, 3) ASSERT(b, 3) ASSERT(gcd, 3)"
// !try "a := 2; b := 5; x := a + b; ASSERT(x, 7)"
// !try "a := 2; b := 5; x := a - b; ASSERT(x, -3)"
// !try "a := 2; b := 5; x := a * b; ASSERT(x, 10)"
// !try "a := 2; b := 5; x := a / b; ASSERT(x, 0.4)"
// !try "a := 2; b := 5; x := a % b; ASSERT(x, 2)"
// !try "a := 2; b := 5; x := a ** b; ASSERT(x, 32)"

// !try "a := 2.5; b := 5.5; x := a + b; ASSERT(x, 8.0)"
// !try "a := 2.5; b := 5.5; x := a - b; ASSERT(x, -3.0)"
// !try "a := 2.5; b := 5.5; x := a * b; ASSERT(x, 13.75)"
// !try "a := 2.5; b := 5.5; x := a / b; ASSERT(x, 0.45454545454545453)"
// !try "a := 2.5; b := 5.5; x := a % b; ASSERT(x, 2.5)"
// !try "a := 2.5; b := 5.5; x := a ** b; ASSERT(x, 154.40808887540913)"

// !try "print('Result: ', (3+4)*2, '\n');"

// !try "
//   procedure sub {
//     print('Hello from a procedure\n'); 
//   }


//   x := 3;
//   while x > 0 do { 
//     print('x is ', x, '\n'); 
//     x := x -1; 
//   }

//   sub();

//   ASSERT(x, 0)
// "

// !try "d:= true; ASSERT(d, 1)"
// !try "d:= false; ASSERT(d, 0)"
// !try "d:= !true; ASSERT(d, 0)"
// !try "d:= !false; ASSERT(d, 1)"
// !try "d:= true && false; ASSERT(d, 0)"
// !try "d:= true || false; ASSERT(d, 1)"
// !try "
//   if 1 then print('hello\n');
//   if true then print('hello\n');
//   d:= true;
//   while d do {
//     print('Inside While Loop!\n');
//     println('Also Inside While Loop!');
//     d := false;
//   }
//   ASSERT(d, 0)
// "

// !try "x := 1; y:= ++x; ASSERT(x, 2) ASSERT(y, 2)"
// !try "x := 1; y:= --x; ASSERT(x, 0) ASSERT(y, 0)"
// !try "x := 1; y:= x++; ASSERT(x, 2) ASSERT(y, 1)"
// !try "x := 1; y:= x--; ASSERT(x, 0) ASSERT(y, 1)"

// !try "for(x:=0; x < 2; x++) do {println('hello'); println(x);} ASSERT(x, 2)"

// !try "
//   x:='hello'; 
//   println(x);
//   println(x+x);
//   y:=x;

//   if x == y then {
//     println('match!');
//   }
//   else {
//     println('do not match!');
//   }

//   if x != y then {
//     println('match!');
//   }
//   else {
//     println('do not match!');
//   }

//   ASSERT(x, 'hello')
//   ASSERT(y, 'hello')
// "

// !try "
//   x := [];
//   println(x.length());
//   for(i:=0; i < 5; i++) do {
//     x.insert(0, i);
//   }
//   println(x.length());
//   ASSERT(x, [4, 3, 2, 1, 0])
//   ASSERT(i, 5)
// "

// !try "
//   y := [];
//   for(i:=0; i < 5; i++) do {
//     y.append(i);
//   }
//   ASSERT(y, [0, 1, 2, 3, 4])
//   ASSERT(i, 5)
// "

// !try "
//   x := [];
//   for(i:=0; i < 5; i++) do {
//     x.insert(0, i);
//   }
//   x.remove(3);
//   ASSERT(x, [4, 2, 1, 0])
//   ASSERT(i, 5)
// "

// !try "
//   x := [];
//   for(i:=0; i < 5; i++) do {
//     x.insert(0, i);
//   }
//   x.pop(3);
//   ASSERT(x, [4, 3, 2, 0])
//   ASSERT(i, 5)
// "

// !try "
//   x := [1,2,3];
//   x.remove(2);
//   ASSERT(x, [1, 3])
// "

// !try "
//   init();
//   play('B');
//   play('B', 'A');
//   play('B', 'A', 'D');
// "

// !try "x:=5;
//  x < 10 ? println('true') : println('false');
// "

// !try "x := 15;

// if x < 5 then {
//   println('a');
// }
// else if x < 10 then {
//   println('b');
// }
// else if x < 15 then {
//   println('c');
// }
// else if x < 20 then {
//   println('d');
// }
// else {
//   println('e');
// }
// "

// !try "
//   try {
//     x := 5;
//     y := 'hello';

//     z := x + y;
//   }
//   catch {
//     println('an error occurred');
//   }
//   finally {
//     println('the end!');
//   }
// "

// !try "
//   try {
//     x := 5;
//     y := 10;

//     z := x + y;
//     println(z);
//     ASSERT(z, 15)
//   }
//   catch {
//     println('an error occurred');
//   }
//   finally {
//     println('the end!');
//     ASSERT('the end!', 'the end!') // Did this section execute?
//   }
// "

// !try "
//     x := input('Enter an input:');
//     println(x);
//     y := x;
//     ASSERT(x, y)
// "

// !try "
//     x := () -> { 
//         println('hello');
//         a := 5;
//         println(a++); 
//     };
//     x();
//     ASSERT(a, 6)
// "

// !try "
//     a := 5;
//     b := 10;
//     c := 15;

//     y := (p) -> {println(p);};
//     y(a);
//     ASSERT(p, 5)

//     y := (p, q, r) -> {
//         println(p + q + r);
        
//     };
//     y(a, b, c);
//     ASSERT(p, 5)
//     ASSERT(q, 10)
//     ASSERT(r, 15)
// "

// !try "

// x := 5;

// // x:= 10;

// /* BLOCK
// COMMENT
// HERE
// */

// println(x);
// ASSERT(x, 5)
// "

// !try "

// function doo () {
//     x := 20;
//     return x;
// }

// function re () {
//     return 10;
// }

// function me (a) {
//     return a + 10;
// }

// function fa (a, b, c, d, e) {
//     return a + b + c + d + e;
// }

// a := doo();
// b := re();
// c := me(20);
// d := fa(1, 2, 3, 4, 5);

// println(a);
// println(b);
// println(c);
// println(d);

// ASSERT(a, 1)
// ASSERT(b, 2)
// ASSERT(c, 3)
// ASSERT(d, 15)
// "

// !try "
// x := 10;

// switch(x) {
//     case 5: x := 1;
//     case 10: x := 2;
//     default: x := 3;
// }

// ASSERT(x, 2)

// "

// !try"

// x := 1;

// switch(x) {
//     case 10: x := 10;
//     default: x := 2;
// }

// ASSERT(x, 2)

// "

// !try "

// day := 'Monday';
// f := 0;
// switch(day) {
//     case 'Monday':
//         f := 1;
//     case 'Tuesday':
//         f := 2;
//     case 'Wednesday':
//         f := 3;
//     case 'Thusday':
//         f := 4;
//     case 'Friday':
//         f := 5;
//     case 'Saturday':
//         f := 6;
//     case 'Sunday':
//         f := 7;
//     default: 
//         f:= 8;
// }

// ASSERT(f, 1)
// "

// !try "
//     procedure foo {
//         for (i:=0; i< 10; i++) do {
//             switch(i) {
//                 case 0:
//                     ASSERT(i, 0)
//                 case 1:
//                     ASSERT(i, 1)
//                 case 2:
//                     ASSERT(i, 2)
//                 case 3:
//                     ASSERT(i, 3)
//                 case 4:
//                     ASSERT(i, 4)
//                 case 5:
//                     ASSERT(i, 5)
//                 case 6:
//                     ASSERT(i, 6)
//                 case 7:
//                     ASSERT(i, 7)
//                 case 8:
//                     ASSERT(i, 8)
//                 case 9:
//                     ASSERT(i, 9)
//                 default: 
//                     ASSERT(i, 10)
//             }
//         }
//     }

//     foo();
// "

// !try "
//     plugin('init');
//     plugin('playscale', 'C', 'major');
// "
// !try"
//     plugin('init');
//     plugin('tune');
// "
// !try"
//     plugin('init');
//     plugin('tunechordmajor');
// "
// !try"
//     plugin('init');
//     plugin('tunechordminor');
// "


// !try "
// plugin('init');
// plugin('setbpm', 140);
// plugin('setoctave', 4);

// plugin('arpeggiate', ['A', 'A#', 'B', 'B#', 'C', 'C#', 'D', 'D#', 'E', 'E#', 'F', 'F#', 'G', 'G#']);
// plugin('transpose', ['C', 'D', 'E'], 2);

// plugin('loop', 3, 'tunechordminor');

// plugin('bridge', ['Am', 'F', 'C', 'G']);
// "

// !try "
// plugin('init');
// plugin('setinstrument', 'Overdriven Guitar');
// plugin('bridge', ['Am', 'F', 'C', 'G']);
// plugin('setinstrument', 'Violin');
// plugin('bridge', ['Am', 'F', 'C', 'G']);
// "

// !try "
// init();
// setinstrument('Violin');
// bridge(['Am', 'F', 'C', 'G']);
// "

// !try "
// init();
// setbpm(100);
// setoctave(4);
// setinstrument('Electric Piano 2');

// playscale('C', 'major');
// arpeggiate(['C', 'E', 'G']);
// transpose(['C', 'D', 'E'], 2);
// bridge(['Am', 'F', 'C', 'G']);
// loop(3, 'tunechordminor');
// "

!try "
init();
setbpm(100);
setoctave(4);

setinstrument('Electric Piano 2');
arpeggiate(['A', 'C#', 'E']);     // A major arpeggio
rest(1);
arpeggiate(['F#m', 'D']);         // a quick moody jump
rest(1);

setinstrument('Viola');
bridge(['F#m', 'D', 'A', 'E']);   // Classic emotional progression
rest(2);

setinstrument('Overdriven Guitar');
loop(2, 'tunechordminor');        // double punch with minor chords
rest(1);

setinstrument('Trumpet');
transpose(['C', 'E', 'G'], 1);    // a jazzy shift
rest(1);
transpose(['B', 'D', 'F#'], 1);   // brightens things up
rest(1);

setinstrument('Electric Piano 1');
playscale('A', 'minor_melodic_descending');
rest(2);


"