(* gcdAttribute.art GCD in attribute-actions with native Java actions - 5 CFG phrase level rules and 3 CFG lexical rules*)
(* Use ofplugin in expressions requires return result that can be cast to int *)
//!interpreter attributeAction
!support
!! import java.util.Map; import java.util.HashMap; import java.util.ArrayList; import java.util.List; !!
!! 
  Map<String, Object> variables = new HashMap<>(); 
  Map<String, AbstractAttributeBlock> procedures = new HashMap<>(); 

  void clear() {
    variables.clear();
    procedures.clear();
  }

  int checkInt (String id) {
    if (variables.get(id) instanceof Integer i) return i;
    return -1;
  }  
  
  ArrayList<Object> checkList (String id) {
    if (variables.get(id) instanceof ArrayList<?> l) {
      @SuppressWarnings("unchecked")
      ArrayList<Object> lr = (ArrayList<Object>) l;
      return lr;
    }
    return null;
  }
  
  Object apply(Object a, Object b, String op) {
    if (a instanceof String sa && b instanceof String sb) {
        return switch (op) {
          case "+" -> sa + sb;
          case "==" -> sa.equals(sb) ? 1 : 0;
          case "!=" -> sa.equals(sb) ? 0 : 1;
          default   -> throw new RuntimeException("Unknown op " + op);
        };
    }
    
    if (a instanceof Number na && b instanceof Number nb) {
        boolean bothInts = na instanceof Integer && nb instanceof Integer;
        double x = na.doubleValue(), y = nb.doubleValue();

        double result = switch (op) {
            case "+"  -> x + y;
            case "-"  -> x - y;
            case "*"  -> x * y;
            case "/"  -> x / y;
            case "%"  -> x % y;
            case "**" -> Math.pow(x, y);
            case ">"  -> (x > y) ? 1 : 0;
            case "<"  -> (x < y) ? 1 : 0;
            case ">=" -> (x >= y) ? 1 : 0;
            case "<=" -> (x <= y) ? 1 : 0;
            case "==" -> (x == y) ? 1 : 0;
            case "!=" -> (x != y) ? 1 : 0;
            default   -> throw new RuntimeException("Unknown op " + op);
        };

        if (bothInts && result == Math.floor(result)) {
            return (int) result;
        }

        return result;
    }

    throw new RuntimeException("Unsupported types or operator: " + a + " " + op + " " + b);
}

!!

text ::= statements                                     !! System.out.println("Final variable map " + variables); clear();!!
statements ::= statement | statement statements

statement ::= 
  assign
| 'if' e0 'then' statement!< elseOpt!<                  !! if ((int) e01.v != 0) interpret(statement1); else interpret(elseOpt1); !! 
| 'while' e0!< 'do' statement!<                         !! interpret(e01); while ((int) e01.v != 0) { interpret(statement1); interpret(e01); } !! 
| 'for' '(' assign e0 ';' e7!< ')' 'do' statement!<     !! interpret(assign1); interpret(e01); while ((int) e01.v != 0) {interpret(statement1); interpret(e71);interpret(e01);} !!
| 'plugin' '(' STRING_SQ ')' ';'                        !! plugin(STRING_SQ1.v); !!
| 'plugin' '(' STRING_SQ ',' e0 ')' ';'                 !! plugin(STRING_SQ1.v, e01.v); !!
| 'plugin' '(' STRING_SQ ',' e0 ',' e0 ')' ';'          !! plugin(STRING_SQ1.v, e01.v, e02.v); !!
| 'plugin' '(' STRING_SQ  ',' e0 ',' e0 ',' e0 ')' ';'  !! plugin(STRING_SQ1.v, e01.v, e02.v, e03.v); !!
| 'print' '(' printElements ')' ';'                    (* print statement *)
| 'println' '(' printElementsLn ')' ';'                    (* print statement *)
| 'procedure' ID statement!<                            !! procedures.put(ID1.v, statement1); !!
| 'call' ID ';'                                         !! interpret(procedures.get(ID1.v)); !! 
| '{' statements '}'                                    (* compound statement *)
| e7';'
| lists';'

elseOpt ::= 'else' statement | #     
assign ::= 
  ID ':=' e0 ';'                                        !! variables.put(ID1.v, e01.v); !!     // assignment 
| ID ':=' STRING_SQ ';'                                 !! variables.put(ID1.v, STRING_SQ1.v); !!
| ID ':=' LIST ';'                                      !! variables.put(ID1.v, LIST1.v); !!

printElements ::= 
  STRING_SQ                                             !! System.out.print(STRING_SQ1.v); !! 
| STRING_SQ                                             !! System.out.print(STRING_SQ1.v); !! ',' printElements 
| e0                                                    !! System.out.print(e01.v); !! 
| e0                                                    !! System.out.print(e01.v); !! ',' printElements  
| lists                                                 !! System.out.print(lists1.v); !!
| lists                                                 !! System.out.print(lists1.v); !! ',' printElements 

printElementsLn ::= 
  STRING_SQ                                             !! System.out.println(STRING_SQ1.v); !! 
| STRING_SQ                                             !! System.out.println(STRING_SQ1.v); !! ',' printElementsLn
| e0                                                    !! System.out.println(e01.v); !! 
| e0                                                    !! System.out.println(e01.v); !! ',' printElementsLn  
| lists                                                 !! System.out.println(lists1.v); !!
| lists                                                 !! System.out.println(lists1.v); !! ',' printElementsLn 


e0 <v:Object> ::= 
  e1                                                    !! e0.v = e11.v; !!
| e1 '>'  e1                                            !! e0.v = apply(e11.v, e12.v, ">"); !!
| e1 '<'  e1                                            !! e0.v = apply(e11.v, e12.v, "<"); !!
| e1 '>=' e1                                            !! e0.v = apply(e11.v, e12.v, ">="); !!
| e1 '<=' e1                                            !! e0.v = apply(e11.v, e12.v, "<="); !!
| e1 '==' e1                                            !! e0.v = apply(e11.v, e12.v, "=="); !!
| e1 '!=' e1                                            !! e0.v = apply(e11.v, e12.v, "!="); !!

e1 <v:Object> ::= 
  e2                                                    !! e1.v = e21.v; !!
| e1 '+' e2                                             !! e1.v = apply(e11.v, e21.v, "+"); !!
| e1 '-' e2                                             !! e1.v = apply(e11.v, e21.v, "-"); !!

e2 <v:Object> ::= 
  e3                                                    !! e2.v = e31.v; !!
| e2 '*' e3                                             !! e2.v = apply(e21.v, e31.v, "*"); !!
| e2 '/' e3                                             !! e2.v = apply(e21.v, e31.v, "/"); !!
| e2 '%' e3                                             !! e2.v = apply(e21.v, e31.v, "%"); !!

e3 <v:Object> ::= 
  e4                                                    !! e3.v = e41.v; !!
| '+' e3                                                !! e3.v = e31.v; !!              
| '-' e3                                                !! e3.v = apply(0, e31.v, "-"); !!

e4 <v:Object> ::= 
  e5                                                    !! e4.v = e51.v; !!
| e5 '**' e4                                            !! e4.v = apply(e51.v, e41.v, "**"); !!

e5 <v:Object> ::= 
  e6                                                    !! e5.v = e61.v; !!
| INTEGER                                               !! e5.v = INTEGER1.v; !!
| REAL                                                  !! e5.v = REAL1.v; !!
| ID                                                    !! e5.v = variables.get(ID1.v);!!
| '(' e1 ')'                                            !! e5.v = e11.v; !!
| 'plugin' '(' STRING_SQ ',' e0 ')'                     !! e5.v = (Number) plugin(STRING_SQ1.v, e01.v); !!

e6 <v:int> ::=
  e7                                                    !! e6.v = e71.v; !!
| e7 '&&' e7                                            !! e6.v = e71.v==1 && e72.v==1 ? 1 : 0; !!
| e7 '||' e7                                            !! e6.v = e71.v==1 || e72.v==1 ? 1 : 0; !!
| '!'e7                                                 !! e6.v = !(e71.v!=1) ? 1 : 0; !!

e7 <v:int> ::= 
  e8                                                    !! e7.v = e81.v; !!
| '++'ID                                                !! {int i = checkInt(ID1.v); variables.put(ID1.v, i + 1); e7.v = i+1;} !!
| '--'ID                                                !! {int i = checkInt(ID1.v); variables.put(ID1.v, i - 1); e7.v = i-1;} !!
| ID'++'                                                !! {int i = checkInt(ID1.v); e7.v = i; variables.put(ID1.v, i + 1);} !!
| ID'--'                                                !! {int i = checkInt(ID1.v); e7.v = i; variables.put(ID1.v, i - 1);} !!


e8 <v:int> ::=
  BOOLEAN                                               !! e8.v = BOOLEAN1.v; !!

lists <v:Object> ::=
  ID'.length()'                                         !! {ArrayList<Object> l = checkList(ID1.v); lists.v = l.size();} !!
| ID'.insert('INTEGER ',' e0 ')'                        !! {ArrayList<Object> l = checkList(ID1.v); l.add(INTEGER1.v, e01.v);} !!
| ID'.append('e0')'                                     !! {ArrayList<Object> l = checkList(ID1.v); l.add(l.size(), e01.v);} !!
| ID'.get('INTEGER')'                                   !! {ArrayList<Object> l = checkList(ID1.v); lists.v = l.get(INTEGER1.v);} !!
| ID'.remove(' e0 ')'                                   !! {ArrayList<Object> l = checkList(ID1.v); lists.v = l.remove((Object) e01.v);} !!
| ID'.pop(' INTEGER ')'                                 !! {ArrayList<Object> l = checkList(ID1.v); lists.v = l.remove(INTEGER1.v);} !!

// Lexical rules
ID <v:String>        ::= &ID                            !! ID.v = lexeme(); !!  
STRING_SQ <v:String> ::= &STRING_SQ                     !! STRING_SQ.v = lexemeCore().translateEscapes(); !!
INTEGER <v:int>      ::= &INTEGER                       !! INTEGER.v = Integer.parseInt(lexeme()); !!
REAL <v:double>      ::= &REAL                          !! REAL.v = Double.parseDouble(lexeme()); !!
BOOLEAN <v:int>      ::= 
  'true'                                                !! BOOLEAN.v = 1; !! 
| 'false'                                               !! BOOLEAN.v = 0; !!
LIST <v:ArrayList>   ::= 
  '['']'                                                !! LIST.v = new ArrayList<Object>(); !!
| '[' listElements ']'                                  !! LIST.v = listElements1.v; !!

listElements <v:ArrayList> ::=
  e0                                                    !! listElements.v = new ArrayList<Object>(); listElements.v.add(e01.v); !!
| e0 ',' listElements                                   !! listElements.v = listElements1.v; listElements.v.add(0, e01.v); !!  

//!generate actions 
// !try "a := 6; b := 9; while a != b do if a > b then a := a - b; else b := b - a; gcd := a; plugin('init'); plugin('ding');"
// !try "a := 2; b := 5; x := a + b;"
// !try "a := 2; b := 5; x := a - b;"
// !try "a := 2; b := 5; x := a * b;"
// !try "a := 2; b := 5; x := a / b;"
// !try "a := 2; b := 5; x := a % b;"
// !try "a := 2; b := 5; x := a ** b;"

// !try "a := 2.5; b := 5.5; x := a + b;"
// !try "a := 2.5; b := 5.5; x := a - b;"
// !try "a := 2.5; b := 5.5; x := a * b;"
// !try "a := 2.5; b := 5.5; x := a / b;"
// !try "a := 2.5; b := 5.5; x := a % b;"
// !try "a := 2.5; b := 5.5; x := a ** b;"

// !try "print('Result: ', (3+4)*2, '\n');"

// !try "
//   procedure sub {
//     print('Hello from a procedure\n'); 
//   }


//   x := 3;
//   while x > 0 do { 
//     print('x is ', x, '\n'); 
//     x := x -1; 
//   }

//   call sub;
// "

// !try "d:= true;"
// !try "d:= false;"
// !try "d:= !true;"
// !try "d:= !false;"
// !try "d:= true && false;"
// !try "d:= true || false;"
// !try "
//   if 1 then print('hello\n');
//   if true then print('hello\n');
//   d:= true;
//   while d do {
//     print('Inside While Loop!\n');
//     println('Also Inside While Loop!');
//     d := false;
//   }
// "

// // !try "x := 1; y:= ++x;"
// // !try "x := 1; y:= --x;"
// // !try "x := 1; y:= x++;"
// // !try "x := 1; y:= x--;"

// !try "for(x:=0; x < 2; x++) do {println('hello'); println(x);}"

// !try "
//   x:='hello'; 
//   println(x);
//   println(x+x);
//   y:=x;

//   if x == y then {
//     println('match!');
//   }
//   else {
//     println('do not match!');
//   }

//   if x != y then {
//     println('match!');
//   }
//   else {
//     println('do not match!');
//   }
// "

// !try "
//   x := [];
//   println(x.length());
//   for(i:=0; i < 5; i++) do {
//     x.insert(0, i);
//   }
//   println(x.length());
// "

// !try "
//   y := [];
//   for(i:=0; i < 5; i++) do {
//     y.append(i);
//   }
// "

// !try "
//   x := [];
//   for(i:=0; i < 5; i++) do {
//     x.insert(0, i);
//   }
//   x.remove(3);
// "

// !try "
//   x := [];
//   for(i:=0; i < 5; i++) do {
//     x.insert(0, i);
//   }
//   x.pop(3);
// "

!try "
  x := [1,2,3];
  x.remove(2);
"