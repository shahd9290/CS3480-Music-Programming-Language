(* gcdAttribute.art GCD in attribute-actions with native Java actions - 5 CFG phrase level rules and 3 CFG lexical rules*)
(* Use ofplugin in expressions requires return result that can be cast to int *)
//!interpreter attributeAction
!support
!! import java.util.Map; import java.util.HashMap; !!
!! 
  Map<String, Object> variables = new HashMap<>(); 
  Map<String, AbstractAttributeBlock> procedures = new HashMap<>(); 
    
  Object apply(Object a, Object b, String op) {
    if (a instanceof String sa && b instanceof String sb) {
        return switch (op) {
          case "+" -> sa + sb;
          case "==" -> sa.equals(sb) ? 1 : 0;
          case "!=" -> sa.equals(sb) ? 0 : 1;
          default   -> throw new RuntimeException("Unknown op " + op);
        };
    }
    
    if (a instanceof Number na && b instanceof Number nb) {
        boolean bothInts = na instanceof Integer && nb instanceof Integer;
        double x = na.doubleValue(), y = nb.doubleValue();
        int xi = na.intValue(), yi = nb.intValue();

        return switch (op) {
            case "+"  -> bothInts ? xi + yi : x + y;
            case "-"  -> bothInts ? xi - yi : x - y;
            case "*"  -> bothInts ? xi * yi : x * y;
            case "/"  -> bothInts ? xi / yi : x / y;
            case "%"  -> bothInts ? xi % yi : x % y;
            case "**" -> bothInts ? (int) Math.pow(xi, yi) : Math.pow(x, y);
            case ">"  -> (xi > yi) ? 1 : 0;
            case "<"  -> (xi < yi) ? 1 : 0;
            case ">=" -> (xi >= yi) ? 1 : 0;
            case "<=" -> (xi <= yi) ? 1 : 0;
            case "==" -> (xi == yi) ? 1 : 0;
            case "!=" -> (xi != yi) ? 1 : 0;
            default   -> throw new RuntimeException("Unknown op " + op);
      };
    }
    throw new RuntimeException("Unsupported types or operator: " + a + " " + op + " " + b);
  }
!!

text ::= statements                                     !! System.out.println("Final variable map " + variables); !!
statements ::= statement | statement statements

statement ::= 
  assign
| 'if' e0 'then' statement!< elseOpt!<                  !! if ((int) e01.v != 0) interpret(statement1); else interpret(elseOpt1); !! 
| 'while' e0!< 'do' statement!<                         !! interpret(e01); while ((int) e01.v != 0) { interpret(statement1); interpret(e01); } !! 
| 'for' '(' assign!< e0 ';' e7!< ')' 'do' statement!<   !! interpret(assign1); interpret(e01); while ((int) e01.v != 0) {interpret(statement1); interpret(e71);interpret(e01);} !!
| 'plugin' '(' STRING_SQ ')' ';'                        !! plugin(STRING_SQ1.v); !!
| 'plugin' '(' STRING_SQ ',' e0 ')' ';'                 !! plugin(STRING_SQ1.v, e01.v); !!
| 'plugin' '(' STRING_SQ ',' e0 ',' e0 ')' ';'          !! plugin(STRING_SQ1.v, e01.v, e02.v); !!
| 'plugin' '(' STRING_SQ  ',' e0 ',' e0 ',' e0 ')' ';'  !! plugin(STRING_SQ1.v, e01.v, e02.v, e03.v); !!
| 'print' '(' printElements ')' ';'                    (* print statement *)
| 'println' '(' printElementsLn ')' ';'                    (* print statement *)
| 'procedure' ID statement!<                            !! procedures.put(ID1.v, statement1); !!
| 'call' ID ';'                                         !! interpret(procedures.get(ID1.v)); !! 
| '{' statements '}'                                    (* compound statement *)
| e7';'

elseOpt ::= 'else' statement | #     
assign ::= 
  ID ':=' e0 ';'                                        !! variables.put(ID1.v, e01.v); !!     // assignment 
| ID ':=' STRING_SQ ';'                                 !! variables.put(ID1.v, STRING_SQ1.v); !!

printElements ::= 
  STRING_SQ                                             !! System.out.print(STRING_SQ1.v); !! 
| STRING_SQ                                             !! System.out.print(STRING_SQ1.v); !! ',' printElements 
| e0                                                    !! System.out.print(e01.v); !! 
| e0                                                    !! System.out.print(e01.v); !! ',' printElements  

printElementsLn ::= 
  STRING_SQ                                             !! System.out.println(STRING_SQ1.v); !! 
| STRING_SQ                                             !! System.out.println(STRING_SQ1.v); !! ',' printElementsLn
| e0                                                    !! System.out.println(e01.v); !! 
| e0                                                    !! System.out.println(e01.v); !! ',' printElementsLn  

e0 <v:Object> ::= 
  e1                                                    !! e0.v = e11.v; !!
| e1 '>'  e1                                            !! e0.v = apply(e11.v, e12.v, ">"); !!
| e1 '<'  e1                                            !! e0.v = apply(e11.v, e12.v, "<"); !!
| e1 '>=' e1                                            !! e0.v = apply(e11.v, e12.v, ">="); !!
| e1 '<=' e1                                            !! e0.v = apply(e11.v, e12.v, "<="); !!
| e1 '==' e1                                            !! e0.v = apply(e11.v, e12.v, "=="); !!
| e1 '!=' e1                                            !! e0.v = apply(e11.v, e12.v, "!="); !!

e1 <v:Object> ::= 
  e2                                                    !! e1.v = e21.v; !!
| e1 '+' e2                                             !! e1.v = apply(e11.v, e21.v, "+"); !!
| e1 '-' e2                                             !! e1.v = apply(e11.v, e21.v, "-"); !!

e2 <v:Object> ::= 
  e3                                                    !! e2.v = e31.v; !!
| e2 '*' e3                                             !! e2.v = apply(e21.v, e31.v, "*"); !!
| e2 '/' e3                                             !! e2.v = apply(e21.v, e31.v, "/"); !!
| e2 '%' e3                                             !! e2.v = apply(e21.v, e31.v, "%"); !!

e3 <v:Object> ::= 
  e4                                                    !! e3.v = e41.v; !!
| '+' e3                                                !! e3.v = e31.v; !!              
| '-' e3                                                !! e3.v = apply(0, e31.v, "-"); !!

e4 <v:Object> ::= 
  e5                                                    !! e4.v = e51.v; !!
| e5 '**' e4                                            !! e4.v = apply(e51.v, e41.v, "**"); !!

e5 <v:Object> ::= 
  e6                                                    !! e5.v = e61.v; !!
| INTEGER                                               !! e5.v = INTEGER1.v; !!
| REAL                                                  !! e5.v = REAL1.v; !!
| ID                                                    !! e5.v = variables.get(ID1.v);!!
| '(' e1 ')'                                            !! e5.v = e11.v; !!
| 'plugin' '(' STRING_SQ ',' e0 ')'                     !! e5.v = (Number) plugin(STRING_SQ1.v, e01.v); !!

e6 <v:int> ::=
  e7                                                    !! e6.v = e71.v; !!
| e7 '&&' e7                                            !! e6.v = e71.v==1 && e72.v==1 ? 1 : 0; !!
| e7 '||' e7                                            !! e6.v = e71.v==1 || e72.v==1 ? 1 : 0; !!
| '!'e7                                                 !! e6.v = !(e71.v!=1) ? 1 : 0; !!

e7<v:int> ::= 
  e8                                                    !! e7.v = e81.v; !!
| '++'ID                                                !! {Number num = (Number) variables.get(ID1.v); if (num instanceof Integer i) {variables.put(ID1.v, i + 1); e7.v = i+1;}} !!
| '--'ID                                                !! {Number num = (Number) variables.get(ID1.v); if (num instanceof Integer i) {variables.put(ID1.v, i - 1); e7.v = i-1;}} !!
| ID'++'                                                !! {Number num = (Number) variables.get(ID1.v); if (num instanceof Integer i) {e7.v = i; variables.put(ID1.v, i + 1);} }  !!
| ID'--'                                                !! {Number num = (Number) variables.get(ID1.v); if (num instanceof Integer i) {e7.v = i; variables.put(ID1.v, i - 1);} }  !!


e8 <v:int> ::=
  BOOLEAN                                               !! e8.v = BOOLEAN1.v; !!
// Lexical rules
ID <v:String>        ::= &ID                            !! ID.v = lexeme(); !!  
STRING_SQ <v:String> ::= &STRING_SQ                     !! STRING_SQ.v = lexemeCore().translateEscapes(); !!
INTEGER <v:int>      ::= &INTEGER                       !! INTEGER.v = Integer.parseInt(lexeme()); !!
REAL <v:double>      ::= &REAL                          !! REAL.v = Double.parseDouble(lexeme()); !!
BOOLEAN <v:int>  ::= 'true' !! BOOLEAN.v = 1;           !! | 'false' !! BOOLEAN.v = 0; !!
//!generate actions 
// !try "a := 6; b := 9; while a != b do if a > b then a := a - b; else b := b - a; gcd := a; plugin('init'); plugin('ding');"
// !try "a := 2; b := 5;"
// !try "x := a + b;"
// !try "x := a - b;"
// !try "x := a * b;"
// !try "x := a / b;"
// !try "x := a % b;"
// !try "x := a ** b;"

// !try "a := 2.5; b := 5.5;"
// !try "x := a + b;"
// !try "x := a - b;"
// !try "x := a * b;"
// !try "x := a / b;"
// !try "x := a % b;"
// !try "x := a ** b;"

// !try "print('Result: ', (3+4)*2, '\n');"
// !try "x := 3;"

// !try "
// procedure sub {
//   print('Hello from a procedure\n'); 
// }


// x := 3;
// while x > 0 do { 
//   print('x is ', x, '\n'); 
//   x := x -1; 
// }

// call sub;
// "

// !try "d:= true;"
// !try "d:= false;"
// !try "d:= !true;"
// !try "d:= !false;"
// !try "d:= true && false;"
// !try "d:= true || false;"
// !try "
// if 1 then print('hello\n');
// if true then print('hello\n');
// d:= true;
// while d do {
//   print('Inside While Loop!\n');
//   println('Also Inside While Loop!');
//   d := false;
// }
// "

// !try "x := 1; y:= ++x;"
// !try "x := 1; y:= --x;"
// !try "x := 1; y:= x++;"
// !try "x := 1; y:= x--;"

// !try "for(x:=0; x < 2; x++) do {println('hello'); println(x);}"

!try "
x:='hello'; 
println(x);
println(x+x);
y:=x;

if x == y then {
  println('match!');
}
else {
  println('do not match!');
}

if x != y then {
  println('match!');
}
else {
  println('do not match!');
}
"