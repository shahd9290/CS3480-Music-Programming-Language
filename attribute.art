!support
!! import java.util.Map; import java.util.HashMap; import java.util.ArrayList; import java.util.List; import java.util.Scanner; !!
!! 
  interface lambdaInterface {
    void run(Object... args);
  }
  class Case {
    Object match;
    AbstractAttributeBlock body;

    Case(Object match, AbstractAttributeBlock body) {
      this.match = match;
      this.body = body;
    }
  }

  int successCount = 0;
  int failCount = 0;

  Map<String, Object> variables = new HashMap<>(); 
  Map<String, AbstractAttributeBlock> procedures = new HashMap<>();
  Map<String, Object> funcReturns = new HashMap<>();

  Scanner scanner = new Scanner(System.in);

  void clear() {
    variables.clear();
    procedures.clear();
  }

  int checkInt (String id) {
    if (variables.get(id) instanceof Integer i) return i;
    return -1;
  }  
  
  ArrayList<Object> checkList (String id) {
    if (variables.get(id) instanceof ArrayList<?> l) {
      @SuppressWarnings("unchecked")
      ArrayList<Object> lr = (ArrayList<Object>) l;
      return lr;
    }
    return null;
  }
  
  Object apply(Object a, Object b, String op) {
    if (a instanceof String sa && b instanceof String sb) {
        return switch (op) {
          case "+" -> sa + sb;
          case "==" -> sa.equals(sb) ? 1 : 0;
          case "!=" -> sa.equals(sb) ? 0 : 1;
          default   -> throw new RuntimeException("Unknown op " + op);
        };
    }
    
    if (a instanceof Number na && b instanceof Number nb) {
        boolean bothInts = na instanceof Integer && nb instanceof Integer;
        double x = na.doubleValue(), y = nb.doubleValue();

        double result = switch (op) {
            case "+"  -> x + y;
            case "-"  -> x - y;
            case "*"  -> x * y;
            case "/"  -> x / y;
            case "%"  -> x % y;
            case "**" -> Math.pow(x, y);
            case ">"  -> (x > y) ? 1 : 0;
            case "<"  -> (x < y) ? 1 : 0;
            case ">=" -> (x >= y) ? 1 : 0;
            case "<=" -> (x <= y) ? 1 : 0;
            case "==" -> (x == y) ? 1 : 0;
            case "!=" -> (x != y) ? 1 : 0;
            default   -> throw new RuntimeException("Unknown op " + op);
        };

        if (bothInts && result == Math.floor(result)) {
            return (int) result;
        }

        return result;
    }

    throw new RuntimeException("Unsupported types or operator: " + a + " " + op + " " + b);
  }

!!



text ::= statements                                     !! System.out.println("Final variable map " + variables); System.out.println(String.format("Successful Tests: %d\nFailed Tests: %d\n", successCount, failCount));; clear();!!

asserting ::= 'ASSERT' '(' assignees ',' assignees ')'  !! interpret(assignees1);
                                                           interpret(assignees2);
                                                           if (assignees1.v.toString().equals(assignees2.v.toString())) {
                                                               System.out.println("Successful test: got value " + assignees1.v);
                                                               successCount++;
                                                           } else {
                                                               System.out.println("Test failed: expected " + assignees2.v + " but got " + assignees1.v);
                                                               failCount++;
                                                           }
                                                        !!

statements ::= statement | statement statements

statement ::= 
  assign
| asserting
| '{' statements '}'           
| methods';'
| functions
| funcCall';'
| trycatch
| LINE_COMMENT
| BLOCK_COMMENT
| branchLoops
| e0 '?' methods!< ':' methods!<';'                     !! if ((int) e01.v != 0) interpret(methods1); else interpret(methods2); !! 


branchLoops ::=
  'if' e0 'then' statement!< elseOpt!<                  !! if ((int) e01.v != 0) interpret(statement1); else interpret(elseOpt1); !!
| 'while' e0!< 'do' statement!<                         !! interpret(e01); while ((int) e01.v != 0) { interpret(statement1); interpret(e01); } !! 
| 'for' '(' assign e0 ';' e7!< ')' 'do' statement!<     !! interpret(assign1); interpret(e01); while ((int) e01.v != 0) {interpret(statement1); interpret(e71);interpret(e01);} !!
| 'switch' assignees '{' cases defaultOpt '}'           !! Object val = assignees1.v;
                                                           boolean matched = false;

                                                           ArrayList<Case> caseList = (ArrayList<Case>) cases1.v;
                                                           for (Case c : caseList) {
                                                             if (val.equals(c.match)) {
                                                               interpret(c.body);
                                                               matched = true;
                                                               break;
                                                             }
                                                           }

                                                           if (!matched && defaultOpt1 != null) {
                                                             interpret(defaultOpt1.v);
                                                           }
                                                        !!

cases <v:ArrayList> ::= caseEntry cases                     !! cases.v = cases1.v; cases.v.add(0, caseEntry1.v); !!
                      | caseEntry                           !! cases.v = new ArrayList<>(); cases.v.add(caseEntry1.v); !!

caseEntry <v:Case> ::= 'case' assignees ':' statement!<     !! caseEntry.v = new Case(assignees1.v, statement1); !!

defaultOpt <v:AbstractAttributeBlock> ::= 
  'default' ':' statement!<                              !! defaultOpt.v = statement1; !!
| #


trycatch ::=
  'try' '{' statements!< '}' 
  'catch' '{'statements!< '}' 
  'finally' '{'statements!< '}'                         !! try {interpret(statements1);} catch (Exception e) {interpret(statements2);} finally {interpret(statements3);} !!

| 'try' '{' statements!< '}' 
  'catch' '{'statements!< '}'                           !! try {interpret(statements1);} catch (Exception e) {interpret(statements2);} !!

lambdas <v:lambdaInterface> ::=
  '()' '->' statement!<                                 !! lambdas.v = (Object... args) -> interpret(statement1); !!
| '(' idList ')' '->' statement!<                       !!  ArrayList<String> names = idList1.v;
                                                            lambdas.v = new lambdaInterface() {
                                                              public void run(Object... args) {
                                                                for (int i = 0; i < names.size(); i++) {
                                                                  variables.put(names.get(i), args[i]);
                                                                }
                                                                interpret(statement1);
                                                              }
                                                            }; 
                                                        !!                           

idList <v:ArrayList> ::= 
  ID                                                    !! idList.v = new ArrayList<>(); idList.v.add(ID1.v); !!
| ID ',' idList                                         !! idList.v = idList1.v; idList.v.add(0, ID1.v); !!

argList <v:ArrayList> ::= 
  e0                                                    !! argList.v = new ArrayList<>(); argList.v.add(e01.v); !!
| e0 ',' argList                                        !! argList.v = argList1.v; argList.v.add(0, e01.v); !!

functions <v:Object> ::=
  'procedure' ID statement!<                             !! procedures.put(ID1.v, statement1); !!
| 'function' ID '()' '{' funcstmt!<'}'                   !! procedures.put(ID1.v, funcstmt1);  !!
| 'function' ID '(' idList ')' '{' funcstmt!<'}'         !!  ArrayList<String> names = idList1.v;
                                                            lambdaInterface fn = new lambdaInterface() {
                                                              public void run(Object... args) {
                                                                for (int i = 0; i < names.size(); i++) {
                                                                  variables.put(names.get(i), args[i]);
                                                                }
                                                                interpret(funcstmt1);

                                                              }
                                                            };
                                                            variables.put(ID1.v, fn); 
                                                         !!
returnstmt ::= 'return' e0 ';'                           !! funcReturns.put("__returned", e01.v); !!

funcCall <v:Object> ::=
   ID '()'                                               !! funcReturns.remove("__returned");
                                                            if (variables.get(ID1.v) instanceof lambdaInterface l) {
                                                              l.run();
                                                            } 
                                                            else {
                                                              interpret(procedures.get(ID1.v));
                                                            }
                                                            funcCall.v = funcReturns.get("__returned");
                                                         !!
|  ID '(' argList ')'                                    !! funcReturns.remove("__returned");
                                                            if (variables.get(ID1.v) instanceof lambdaInterface l) {
                                                              l.run(argList1.v.toArray());
                                                            } 
                                                            else {
                                                              interpret(procedures.get(ID1.v));
                                                            }
                                                            funcCall.v = funcReturns.get("__returned");
                                                         !!

funcstmt ::= statements returnstmt | returnstmt

methods ::= // Things that need the ; after if called individually, but not in ternary
  'plugin' '(' STRING_SQ ')'                            !! plugin(STRING_SQ1.v); !!
| 'plugin' '(' STRING_SQ ',' e0 ')'                     !! plugin(STRING_SQ1.v, e01.v); !!
| 'plugin' '(' STRING_SQ ',' e0 ',' e0 ')'              !! plugin(STRING_SQ1.v, e01.v, e02.v); !!
| 'plugin' '(' STRING_SQ  ',' e0 ',' e0 ',' e0 ')'      !! plugin(STRING_SQ1.v, e01.v, e02.v, e03.v); !!
| 'print' '(' printElements ')'                         
| 'println' '(' printElementsLn ')' 
| e7
| lists
| playElements
| userIn

elseOpt ::= 'else' statement | #     
assign ::= 
  ID ':=' assignees';'                                  !! variables.put(ID1.v, assignees1.v); !!     // assignment 

assignees <v:Object> ::=
 e0                                                     !! assignees.v = e01.v; !!
| STRING_SQ                                             !! assignees.v = STRING_SQ1.v; !!
| LIST                                                  !! assignees.v = LIST1.v; !!
| userIn                                                !! assignees.v = userIn1.v; !!
| lambdas                                               !! assignees.v = lambdas1.v; !!
| funcCall                                              !! assignees.v = funcCall1.v; !!

userIn <v:String> ::=
  'input' '(' STRING_SQ ')'                             !! System.out.print(STRING_SQ1.v + " "); userIn.v = scanner.nextLine(); !!


printElements ::= 
  STRING_SQ                                             !! System.out.print(STRING_SQ1.v); !! 
| STRING_SQ                                             !! System.out.print(STRING_SQ1.v); !! ',' printElements 
| e0                                                    !! System.out.print(e01.v); !! 
| e0                                                    !! System.out.print(e01.v); !! ',' printElements  
| lists                                                 !! System.out.print(lists1.v); !!
| lists                                                 !! System.out.print(lists1.v); !! ',' printElements 

printElementsLn ::= 
  STRING_SQ                                             !! System.out.println(STRING_SQ1.v); !! 
| STRING_SQ                                             !! System.out.println(STRING_SQ1.v); !! ',' printElementsLn
| e0                                                    !! System.out.println(e01.v); !! 
| e0                                                    !! System.out.println(e01.v); !! ',' printElementsLn  
| lists                                                 !! System.out.println(lists1.v); !!
| lists                                                 !! System.out.println(lists1.v); !! ',' printElementsLn 

playElements ::=
  'play' '(' STRING_SQ ')'                              !! plugin("init"); plugin("play", STRING_SQ1.v); !!
| 'play' '(' STRING_SQ ',' STRING_SQ ')'                !! plugin("init"); plugin("play", STRING_SQ1.v, STRING_SQ2.v); !!
| 'play' '(' STRING_SQ ',' STRING_SQ ',' STRING_SQ ')'  !! plugin("init"); plugin("play", STRING_SQ1.v, STRING_SQ2.v, STRING_SQ3.v); !!

e0 <v:Object> ::= 
  e1                                                    !! e0.v = e11.v; !!
| e1 '>'  e1                                            !! e0.v = apply(e11.v, e12.v, ">"); !!
| e1 '<'  e1                                            !! e0.v = apply(e11.v, e12.v, "<"); !!
| e1 '>=' e1                                            !! e0.v = apply(e11.v, e12.v, ">="); !!
| e1 '<=' e1                                            !! e0.v = apply(e11.v, e12.v, "<="); !!
| e1 '==' e1                                            !! e0.v = apply(e11.v, e12.v, "=="); !!
| e1 '!=' e1                                            !! e0.v = apply(e11.v, e12.v, "!="); !!

e1 <v:Object> ::= 
  e2                                                    !! e1.v = e21.v; !!
| e1 '+' e2                                             !! e1.v = apply(e11.v, e21.v, "+"); !!
| e1 '-' e2                                             !! e1.v = apply(e11.v, e21.v, "-"); !!

e2 <v:Object> ::= 
  e3                                                    !! e2.v = e31.v; !!
| e2 '*' e3                                             !! e2.v = apply(e21.v, e31.v, "*"); !!
| e2 '/' e3                                             !! e2.v = apply(e21.v, e31.v, "/"); !!
| e2 '%' e3                                             !! e2.v = apply(e21.v, e31.v, "%"); !!

e3 <v:Object> ::= 
  e4                                                    !! e3.v = e41.v; !!
| '+' e3                                                !! e3.v = e31.v; !!              
| '-' e3                                                !! e3.v = apply(0, e31.v, "-"); !!

e4 <v:Object> ::= 
  e5                                                    !! e4.v = e51.v; !!
| e5 '**' e4                                            !! e4.v = apply(e51.v, e41.v, "**"); !!

e5 <v:Object> ::= 
  e6                                                    !! e5.v = e61.v; !!
| INTEGER                                               !! e5.v = INTEGER1.v; !!
| REAL                                                  !! e5.v = REAL1.v; !!
| ID                                                    !! e5.v = variables.get(ID1.v);!!
| '(' e1 ')'                                            !! e5.v = e11.v; !!
| 'plugin' '(' STRING_SQ ',' e0 ')'                     !! e5.v = (Number) plugin(STRING_SQ1.v, e01.v); !!

e6 <v:int> ::=
  e7                                                    !! e6.v = e71.v; !!
| e7 '&&' e7                                            !! e6.v = e71.v==1 && e72.v==1 ? 1 : 0; !!
| e7 '||' e7                                            !! e6.v = e71.v==1 || e72.v==1 ? 1 : 0; !!
| '!'e7                                                 !! e6.v = (e71.v!=1) ? 1 : 0; !!

e7 <v:int> ::= 
  e8                                                    !! e7.v = e81.v; !!
| '++'ID                                                !! {int i = checkInt(ID1.v); variables.put(ID1.v, i + 1); e7.v = i+1;} !!
| '--'ID                                                !! {int i = checkInt(ID1.v); variables.put(ID1.v, i - 1); e7.v = i-1;} !!
| ID'++'                                                !! {int i = checkInt(ID1.v); e7.v = i; variables.put(ID1.v, i + 1);} !!
| ID'--'                                                !! {int i = checkInt(ID1.v); e7.v = i; variables.put(ID1.v, i - 1);} !!

e8 <v:int> ::=
  BOOLEAN                                               !! e8.v = BOOLEAN1.v; !!

// Lexical rules
ID <v:String>        ::= &ID                            !! ID.v = lexeme(); !!  
STRING_SQ <v:String> ::= &STRING_SQ                     !! STRING_SQ.v = lexemeCore().translateEscapes(); !!
INTEGER <v:int>      ::= &INTEGER                       !! INTEGER.v = Integer.parseInt(lexeme()); !!
REAL <v:double>      ::= &REAL                          !! REAL.v = Double.parseDouble(lexeme()); !!
BOOLEAN <v:int>      ::= 
  'true'                                                !! BOOLEAN.v = 1; !! 
| 'false'                                               !! BOOLEAN.v = 0; !!
LINE_COMMENT <v:String> ::= &COMMENT_LINE_C             !! LINE_COMMENT.v = lexemeCore().translateEscapes(); !!
BLOCK_COMMENT <v:String> ::= &COMMENT_BLOCK_C           !! BLOCK_COMMENT.v = lexemeCore().translateEscapes(); !!

LIST <v:ArrayList>   ::= 
  '['']'                                                !! LIST.v = new ArrayList<Object>(); !!
| '[' listElements ']'                                  !! LIST.v = listElements1.v; !!
listElements <v:ArrayList> ::=
  e0                                                    !! listElements.v = new ArrayList<Object>(); listElements.v.add(e01.v); !!
| e0 ',' listElements                                   !! listElements.v = listElements1.v; listElements.v.add(0, e01.v); !!  
lists <v:Object> ::=
  ID'.length()'                                         !! {ArrayList<Object> l = checkList(ID1.v); lists.v = l.size();} !!
| ID'.insert('INTEGER ',' e0 ')'                        !! {ArrayList<Object> l = checkList(ID1.v); l.add(INTEGER1.v, e01.v);} !!
| ID'.append('e0')'                                     !! {ArrayList<Object> l = checkList(ID1.v); l.add(l.size(), e01.v);} !!
| ID'.get('INTEGER')'                                   !! {ArrayList<Object> l = checkList(ID1.v); lists.v = l.get(INTEGER1.v);} !!
| ID'.remove(' e0 ')'                                   !! {ArrayList<Object> l = checkList(ID1.v); lists.v = l.remove((Object) e01.v);} !!
| ID'.pop(' INTEGER ')'                                 !! {ArrayList<Object> l = checkList(ID1.v); lists.v = l.remove(INTEGER1.v);} !!
