(* gcdAttribute.art GCD in attribute-actions with native Java actions - 5 CFG phrase level rules and 3 CFG lexical rules*)
(* Use ofplugin in expressions requires return result that can be cast to int *)
//!interpreter attributeAction
!support
!! import java.util.Map; import java.util.HashMap; !!
!! 
Map<String, Object> variables = new HashMap<>(); 
Map<String, AbstractAttributeBlock> procedures = new HashMap<>(); 
   
Number apply(Number a, Number b, String op) {
    boolean bothInts = a instanceof Integer && b instanceof Integer;
    double x = a.doubleValue(), y = b.doubleValue();
    int xi = a.intValue(), yi = b.intValue();

    return switch (op) {
        case "+"  -> bothInts ? xi + yi : x + y;
        case "-"  -> bothInts ? xi - yi : x - y;
        case "*"  -> bothInts ? xi * yi : x * y;
        case "/"  -> bothInts ? xi / yi : x / y;
        case "%"  -> bothInts ? xi % yi : x % y;
        case "**" -> bothInts ? (int) Math.pow(xi, yi) : Math.pow(x, y);
        case ">"  -> (xi > yi) ? 1 : 0;
        case "<"  -> (xi < yi) ? 1 : 0;
        case ">=" -> (xi >= yi) ? 1 : 0;
        case "<=" -> (xi <= yi) ? 1 : 0;
        case "==" -> (xi == yi) ? 1 : 0;
        case "!=" -> (xi != yi) ? 1 : 0;
        default   -> throw new RuntimeException("Unknown op " + op);
    };
}
!!

text ::= statements                                     !! System.out.println("Final variable map " + variables); !!
statements ::= statement | statement statements

statement ::= 
  ID ':=' e0 ';'                                        !! variables.put(ID1.v, e01.v); !!     // assignment 
| 'if' e0 'then' statement!< elseOpt!<                  !! if ((int) e01.v != 0) interpret(statement1); else interpret(elseOpt1); !! 
| 'while' e0!< 'do' statement!<                         !! interpret(e01); while ((int) e01.v != 0) { interpret(statement1); interpret(e01); } !! 
| 'plugin' '(' STRING_SQ ')' ';'                        !! plugin(STRING_SQ1.v); !!
| 'plugin' '(' STRING_SQ ',' e0 ')' ';'                 !! plugin(STRING_SQ1.v, e01.v); !!
| 'plugin' '(' STRING_SQ ',' e0 ',' e0 ')' ';'          !! plugin(STRING_SQ1.v, e01.v, e02.v); !!
| 'plugin' '(' STRING_SQ  ',' e0 ',' e0 ',' e0 ')' ';'  !! plugin(STRING_SQ1.v, e01.v, e02.v, e03.v); !!
| 'print' '(' printElements ')' ';'                    (* print statement *)

| 'procedure' ID statement!< !! procedures.put(ID1.v, statement1); !!
| 'call' ID ';' !! interpret(procedures.get(ID1.v)); !! 

| '{' statements '}'                                    (* compound statement *)

elseOpt ::= 'else' statement | #     

printElements ::= 
  STRING_SQ !! System.out.print(STRING_SQ1.v); !! 
| STRING_SQ !! System.out.print(STRING_SQ1.v); !! ',' printElements 
| e0 !! System.out.print(e01.v); !! 
| e0 !! System.out.print(e01.v); !! ',' printElements  

e0 <v:Number> ::= 
  e1                                    !! e0.v = e11.v; !!
| e1 '>'  e1                            !! e0.v = apply(e11.v, e12.v, ">"); !!
| e1 '<'  e1                            !! e0.v = apply(e11.v, e12.v, "<"); !!
| e1 '>=' e1                            !! e0.v = apply(e11.v, e12.v, ">="); !!
| e1 '<=' e1                            !! e0.v = apply(e11.v, e12.v, "<="); !!
| e1 '==' e1                            !! e0.v = apply(e11.v, e12.v, "=="); !!
| e1 '!=' e1                            !! e0.v = apply(e11.v, e12.v, "!="); !!

e1 <v:Number> ::= 
  e2                                   !! e1.v = e21.v; !!
| e1 '+' e2                            !! e1.v = apply(e11.v, e21.v, "+"); !!
| e1 '-' e2                            !! e1.v = apply(e11.v, e21.v, "-"); !!

e2 <v:Number> ::= 
  e3                                   !! e2.v = e31.v; !!
| e2 '*' e3                            !! e2.v = apply(e21.v, e31.v, "*"); !!
| e2 '/' e3                            !! e2.v = apply(e21.v, e31.v, "/"); !!
| e2 '%' e3                            !! e2.v = apply(e21.v, e31.v, "%"); !!

e3 <v:Number> ::= 
  e4                                   !! e3.v = e41.v; !!
| '+' e3                               !! e3.v = e31.v; !!              
| '-' e3                               !! e3.v = apply(0, e31.v, "-"); !!

e4 <v:Number> ::= 
  e5                                   !! e4.v = e51.v; !!
| e5 '**' e4                           !! e4.v = apply(e51.v, e41.v, "**"); !!

e5 <v:Number> ::= 
  INTEGER                              !! e5.v = INTEGER1.v; !!
| REAL                                 !! e5.v = REAL1.v; !!
| ID                                   !! Object obj = variables.get(ID1.v);
                                          if (obj instanceof Number n) e5.v = n;
                                          else throw new RuntimeException("Variable " + ID1.v + " is not numeric");
                                       !!
| '(' e1 ')'                           !! e5.v = e11.v; !!
| 'plugin' '(' STRING_SQ ',' e0 ')'    !! e5.v = (Number) plugin(STRING_SQ1.v, e01.v); !!

// Lexical rules
ID <v:String>        ::= &ID           !! ID.v = lexeme(); !!  
STRING_SQ <v:String> ::= &STRING_SQ    !! STRING_SQ.v = lexemeCore().translateEscapes(); !!
INTEGER <v:int>      ::= &INTEGER      !! INTEGER.v = Integer.parseInt(lexeme()); !!
REAL <v:double>      ::= &REAL         !! REAL.v = Double.parseDouble(lexeme()); !!
//!generate actions 
!try "a := 6; b := 9; while a != b do if a > b then a := a - b; else b := b - a; gcd := a; plugin('init'); plugin('ding');"
!try "a := 2; b := 5;"
!try "x := a + b;"
!try "x := a - b;"
!try "x := a * b;"
!try "x := a / b;"
!try "x := a % b;"
!try "x := a ** b;"

!try "a := 2.5; b := 5.5;"
!try "x := a + b;"
!try "x := a - b;"
!try "x := a * b;"
!try "x := a / b;"
!try "x := a % b;"
!try "x := a ** b;"

!try "print('Result: ', (3+4)*2, '\n');"
!try "x := 3;"

!try "
procedure sub {
  print('Hello from a procedure\n'); 
}


x := 3;
while x > 0 do { 
  print('x is ', x, '\n'); 
  x := x -1; 
}

call sub;
"